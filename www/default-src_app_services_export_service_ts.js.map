{"version":3,"file":"default-src_app_services_export_service_ts.js","mappings":"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","sources":["./src/app/services/export.service.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport * as XLSX from 'xlsx';\r\nimport { ToastController, LoadingController, AlertController } from '@ionic/angular';\r\n\r\n// Simple Arabic text processor for better PDF rendering\r\ninterface ArabicTextProcessor {\r\n  process(text: string): string;\r\n}\r\n\r\nexport interface ExportConfig {\r\n  title: string;\r\n  subtitle?: string;\r\n  fileName: string;\r\n  data: any[];\r\n  columns: ExportColumn[];\r\n  userName: string;\r\n  pageType: 'sales-record' | 'purchase-record' | 'item-stock' | 'cash2' | 'statement2' | 'spend-record2' | 'balance-sheet2' | 'sub-account2';\r\n  currentDate?: string;\r\n  maxRows?: number;\r\n}\r\n\r\nexport interface ExportColumn {\r\n  key: string;\r\n  title: string;\r\n  width?: number;\r\n  type?: 'text' | 'number' | 'date' | 'currency';\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExportService {\r\n  private readonly MAX_ROWS_WARNING = 1000;\r\n  private readonly MAX_ROWS_LIMIT = 5000;\r\n  \r\n  private toastController!: ToastController;\r\n  private loadingController!: LoadingController;\r\n  private alertController!: AlertController;\r\n\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  private getToastController(): ToastController {\r\n    if (!this.toastController) {\r\n      this.toastController = this.injector.get(ToastController);\r\n    }\r\n    return this.toastController;\r\n  }\r\n\r\n  private getLoadingController(): LoadingController {\r\n    if (!this.loadingController) {\r\n      this.loadingController = this.injector.get(LoadingController);\r\n    }\r\n    return this.loadingController;\r\n  }\r\n\r\n  private getAlertController(): AlertController {\r\n    if (!this.alertController) {\r\n      this.alertController = this.injector.get(AlertController);\r\n    }\r\n    return this.alertController;\r\n  }\r\n\r\n\r\n  private formatDate(date: Date, format: string = 'yyyy-MM-dd HH:mm'): string {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    \r\n    if (format === 'yyyy-MM-dd HH:mm') {\r\n      return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n    } else if (format === 'yyyy-MM-dd') {\r\n      return `${year}-${month}-${day}`;\r\n    }\r\n    \r\n    return `${year}-${month}-${day}`;\r\n  }\r\n\r\n  async exportToPDF(config: ExportConfig): Promise<void> {\r\n    // Check data size\r\n    if (!await this.checkDataSize(config.data.length)) {\r\n      return;\r\n    }\r\n\r\n    const loading = await this.getLoadingController().create({\r\n      message: 'جاري تصدير ملف PDF...',\r\n      spinner: 'crescent'\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      // Use direct Arabic-preserving PDF export\r\n      await this.exportToPDFWithDirectArabicSupport(config);\r\n      \r\n      await this.showSuccessToast('تم تصدير ملف PDF بنجاح مع النص العربي الأصلي');\r\n      \r\n    } catch (error) {\r\n      console.error('Direct Arabic PDF Export Error:', error);\r\n      await this.showErrorToast('فشل في تصدير ملف PDF - يرجى المحاولة مرة أخرى');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private async exportToPDFWithDirectArabicSupport(config: ExportConfig): Promise<void> {\r\n    try {\r\n      console.log('🔄 Starting direct Arabic-preserving PDF export...');\r\n      \r\n      // Import pdf-lib\r\n      const { PDFDocument, rgb, StandardFonts } = await import('pdf-lib');\r\n      \r\n      // Create PDF document\r\n      const pdfDoc = await PDFDocument.create();\r\n      \r\n      // Add landscape page\r\n      let page = pdfDoc.addPage([842, 595]);\r\n      const { width, height } = page.getSize();\r\n      const margin = 40;\r\n      const contentWidth = width - (2 * margin);\r\n      \r\n      // Try to load Arabic font, fallback to better approach if failed\r\n      let font: any;\r\n      let fontBold: any;\r\n      let useExternalFont = false;\r\n      \r\n      try {\r\n        console.log('Attempting to load external Arabic font...');\r\n        // Try loading a simple Arabic font from online\r\n        const fontResponse = await fetch('https://fonts.gstatic.com/s/cairo/v28/SLXGc1nY6HkvalIkTp2mxdt0UX8gfO8_19co.woff2');\r\n        if (fontResponse.ok) {\r\n          const fontBytes = await fontResponse.arrayBuffer();\r\n          font = await pdfDoc.embedFont(fontBytes);\r\n          fontBold = font; // Use same font for bold\r\n          useExternalFont = true;\r\n          console.log('✅ Successfully loaded external Arabic font');\r\n        } else {\r\n          throw new Error('External font loading failed');\r\n        }\r\n      } catch (externalFontError) {\r\n        console.warn('External Arabic font failed, trying TimesRoman:', externalFontError);\r\n        try {\r\n          // Fallback to TimesRoman which has some Unicode support\r\n          font = await pdfDoc.embedFont(StandardFonts.TimesRoman);\r\n          fontBold = await pdfDoc.embedFont(StandardFonts.TimesRomanBold);\r\n          console.log('✅ Using TimesRoman font');\r\n        } catch (timesError) {\r\n          // Final fallback to Helvetica\r\n          font = await pdfDoc.embedFont(StandardFonts.Helvetica);\r\n          fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\r\n          console.log('⚠️ Using Helvetica font as final fallback');\r\n        }\r\n      }\r\n      \r\n      // Title - PRESERVE ORIGINAL ARABIC TEXT\r\n      const titleFontSize = 20;\r\n      let currentY = height - margin - 30;\r\n      \r\n      try {\r\n        // Draw title with original Arabic text - NO CONVERSION\r\n        page.drawText(config.title, {\r\n          x: (width - font.widthOfTextAtSize(config.title, titleFontSize)) / 2,\r\n          y: currentY,\r\n          size: titleFontSize,\r\n          font: fontBold,\r\n          color: rgb(0.2, 0.3, 0.5)\r\n        });\r\n        console.log('✅ Title drawn with original Arabic text');\r\n      } catch (titleError) {\r\n        console.warn('Title drawing failed, trying safer approach:', titleError);\r\n        // If font doesn't support Arabic, use a simple approach\r\n        page.drawText('Stock Report', {\r\n          x: (width - font.widthOfTextAtSize('Stock Report', titleFontSize)) / 2,\r\n          y: currentY,\r\n          size: titleFontSize,\r\n          font: fontBold,\r\n          color: rgb(0.2, 0.3, 0.5)\r\n        });\r\n      }\r\n      \r\n      currentY -= 40;\r\n      \r\n      // Subtitle if exists - PRESERVE ORIGINAL ARABIC TEXT\r\n      if (config.subtitle) {\r\n        try {\r\n          page.drawText(config.subtitle, {\r\n            x: (width - font.widthOfTextAtSize(config.subtitle, 14)) / 2,\r\n            y: currentY,\r\n            size: 14,\r\n            font: font,\r\n            color: rgb(0.4, 0.4, 0.4)\r\n          });\r\n          console.log('✅ Subtitle drawn with original Arabic text');\r\n        } catch (subtitleError) {\r\n          console.warn('Subtitle drawing failed:', subtitleError);\r\n        }\r\n        currentY -= 25;\r\n      }\r\n      \r\n      // Date\r\n      const dateText = config.currentDate || this.formatDate(new Date(), 'yyyy-MM-dd');\r\n      page.drawText(dateText, {\r\n        x: (width - font.widthOfTextAtSize(dateText, 12)) / 2,\r\n        y: currentY,\r\n        size: 12,\r\n        font: font,\r\n        color: rgb(0.5, 0.5, 0.5)\r\n      });\r\n      \r\n      currentY -= 40;\r\n      \r\n      // Table setup\r\n      const colCount = config.columns.length;\r\n      const colWidth = contentWidth / colCount;\r\n      const rowHeight = 25;\r\n      const headerHeight = 30;\r\n      \r\n      // Draw header background\r\n      page.drawRectangle({\r\n        x: margin,\r\n        y: currentY - headerHeight,\r\n        width: contentWidth,\r\n        height: headerHeight,\r\n        color: rgb(0.2, 0.4, 0.7)\r\n      });\r\n      \r\n      // Draw column headers - PRESERVE ORIGINAL ARABIC TEXT\r\n      let currentX = margin;\r\n      config.columns.forEach((col, index) => {\r\n        const headerText = col.title;\r\n        const textSize = 11;\r\n        \r\n        console.log(`📝 Drawing header: \"${headerText}\" (Font: ${useExternalFont ? 'Arabic' : 'Standard'})`);\r\n        \r\n        // Multiple strategies to render Arabic text\r\n        let textRendered = false;\r\n        \r\n        // Strategy 1: Try with original text (works with Arabic fonts)\r\n        if (!textRendered) {\r\n          try {\r\n            const textWidth = this.safeCalculateTextWidth(font, headerText, textSize);\r\n            const textX = currentX + colWidth - textWidth - 10;\r\n            \r\n            page.drawText(headerText, {\r\n              x: Math.max(currentX + 5, textX),\r\n              y: currentY - 18,\r\n              size: textSize,\r\n              font: fontBold,\r\n              color: rgb(1, 1, 1)\r\n            });\r\n            \r\n            textRendered = true;\r\n            console.log(`✅ Header \"${headerText}\" rendered successfully`);\r\n          } catch (error) {\r\n            console.warn(`Strategy 1 failed for \"${headerText}\":`, error);\r\n          }\r\n        }\r\n        \r\n        // Strategy 2: Try with cleaned Arabic text (remove problematic characters)\r\n        if (!textRendered && useExternalFont) {\r\n          try {\r\n            const cleanedText = this.cleanArabicForRendering(headerText);\r\n            const textWidth = this.safeCalculateTextWidth(font, cleanedText, textSize);\r\n            const textX = currentX + colWidth - textWidth - 10;\r\n            \r\n            page.drawText(cleanedText, {\r\n              x: Math.max(currentX + 5, textX),\r\n              y: currentY - 18,\r\n              size: textSize,\r\n              font: fontBold,\r\n              color: rgb(1, 1, 1)\r\n            });\r\n            \r\n            textRendered = true;\r\n            console.log(`✅ Header \"${cleanedText}\" rendered with cleaned text`);\r\n          } catch (error) {\r\n            console.warn(`Strategy 2 failed for \"${headerText}\":`, error);\r\n          }\r\n        }\r\n        \r\n        // Strategy 3: For non-Arabic fonts, keep trying the original text but with error handling\r\n        if (!textRendered) {\r\n          try {\r\n            // Simple approach: draw text and let the font handle what it can\r\n            page.drawText(headerText, {\r\n              x: currentX + 10,\r\n              y: currentY - 18,\r\n              size: textSize,\r\n              font: fontBold,\r\n              color: rgb(1, 1, 1)\r\n            });\r\n            \r\n            textRendered = true;\r\n            console.log(`⚠️ Header \"${headerText}\" rendered with standard approach`);\r\n          } catch (error) {\r\n            console.error(`All strategies failed for \"${headerText}\":`, error);\r\n            // As absolute last resort, show the original Arabic text even if it doesn't render perfectly\r\n            try {\r\n              page.drawText(headerText, {\r\n                x: currentX + 5,\r\n                y: currentY - 18,\r\n                size: 9, // Smaller size might work better\r\n                font: font, // Use regular font instead of bold\r\n                color: rgb(1, 1, 1)\r\n              });\r\n              textRendered = true;\r\n              console.log(`⚠️ Header rendered with minimal approach`);\r\n            } catch (finalError) {\r\n              console.error(`Final attempt failed for \"${headerText}\":`, finalError);\r\n              // Don't render anything rather than showing \"Col 1\", \"Col 2\"\r\n            }\r\n          }\r\n        }\r\n        \r\n        // Column separator\r\n        if (index < colCount - 1) {\r\n          page.drawLine({\r\n            start: { x: currentX + colWidth, y: currentY },\r\n            end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n            thickness: 1,\r\n            color: rgb(0.8, 0.8, 0.8)\r\n          });\r\n        }\r\n        \r\n        currentX += colWidth;\r\n      });\r\n      \r\n      currentY -= headerHeight;\r\n      \r\n      // Draw data rows - PRESERVE ORIGINAL ARABIC TEXT\r\n      const maxRowsPerPage = Math.floor((currentY - margin - 50) / rowHeight);\r\n      let rowsDrawn = 0;\r\n      let pageNumber = 1;\r\n      \r\n      for (let i = 0; i < config.data.length; i++) {\r\n        const row = config.data[i];\r\n        \r\n        // Check if we need a new page\r\n        if (rowsDrawn >= maxRowsPerPage) {\r\n          // Add footer\r\n          await this.drawSimpleFooter(page, config, pageNumber, Math.ceil(config.data.length / maxRowsPerPage), font, width, margin);\r\n          \r\n          // New page\r\n          page = pdfDoc.addPage([842, 595]);\r\n          currentY = height - margin - 40;\r\n          rowsDrawn = 0;\r\n          pageNumber++;\r\n          \r\n          // Redraw headers on new page\r\n          page.drawRectangle({\r\n            x: margin,\r\n            y: currentY - headerHeight,\r\n            width: contentWidth,\r\n            height: headerHeight,\r\n            color: rgb(0.2, 0.4, 0.7)\r\n          });\r\n          \r\n          currentX = margin;\r\n          config.columns.forEach((col, index) => {\r\n            const headerText = col.title;\r\n            \r\n            // Use same multi-strategy approach for new page headers\r\n            let textRendered = false;\r\n            \r\n            // Strategy 1: Try original text\r\n            if (!textRendered) {\r\n              try {\r\n                const textWidth = this.safeCalculateTextWidth(font, headerText, 11);\r\n                const textX = currentX + colWidth - textWidth - 10;\r\n                \r\n                page.drawText(headerText, {\r\n                  x: Math.max(currentX + 5, textX),\r\n                  y: currentY - 18,\r\n                  size: 11,\r\n                  font: fontBold,\r\n                  color: rgb(1, 1, 1)\r\n                });\r\n                textRendered = true;\r\n              } catch (error) {\r\n                // Continue to next strategy\r\n              }\r\n            }\r\n            \r\n            // Strategy 2: Try cleaned text\r\n            if (!textRendered) {\r\n              try {\r\n                const cleanedText = this.cleanArabicForRendering(headerText);\r\n                page.drawText(cleanedText, {\r\n                  x: currentX + 10,\r\n                  y: currentY - 18,\r\n                  size: 11,\r\n                  font: fontBold,\r\n                  color: rgb(1, 1, 1)\r\n                });\r\n                textRendered = true;\r\n              } catch (error) {\r\n                // Continue to next strategy\r\n              }\r\n            }\r\n            \r\n            // Strategy 3: Simple approach\r\n            if (!textRendered) {\r\n              try {\r\n                page.drawText(headerText, {\r\n                  x: currentX + 5,\r\n                  y: currentY - 18,\r\n                  size: 10, // Smaller size\r\n                  font: font, // Regular font\r\n                  color: rgb(1, 1, 1)\r\n                });\r\n                textRendered = true;\r\n              } catch (error) {\r\n                // Don't render anything rather than \"Col X\"\r\n              }\r\n            }\r\n            \r\n            if (index < colCount - 1) {\r\n              page.drawLine({\r\n                start: { x: currentX + colWidth, y: currentY },\r\n                end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n                thickness: 1,\r\n                color: rgb(0.8, 0.8, 0.8)\r\n              });\r\n            }\r\n            currentX += colWidth;\r\n          });\r\n          \r\n          currentY -= headerHeight;\r\n        }\r\n        \r\n        // Row background\r\n        if (i % 2 === 0) {\r\n          page.drawRectangle({\r\n            x: margin,\r\n            y: currentY - rowHeight,\r\n            width: contentWidth,\r\n            height: rowHeight,\r\n            color: rgb(0.95, 0.95, 0.95)\r\n          });\r\n        }\r\n        \r\n        // Draw cell data - PRESERVE ORIGINAL ARABIC TEXT\r\n        currentX = margin;\r\n        config.columns.forEach((col, colIndex) => {\r\n          const cellValue = this.getCellValue(row, col, i + 1).toString();\r\n          const textSize = 10;\r\n          const maxWidth = colWidth - 10;\r\n          \r\n          // Prepare display text (truncate if needed)\r\n          let displayText = cellValue;\r\n          let textWidth = this.safeCalculateTextWidth(font, displayText, textSize);\r\n          \r\n          while (textWidth > maxWidth && displayText.length > 1) {\r\n            displayText = displayText.slice(0, -1);\r\n            textWidth = this.safeCalculateTextWidth(font, displayText + '...', textSize);\r\n          }\r\n          if (displayText !== cellValue && displayText.length > 0) {\r\n            displayText = displayText + '...';\r\n            textWidth = this.safeCalculateTextWidth(font, displayText, textSize);\r\n          }\r\n          \r\n          // Multiple strategies to render cell text\r\n          let cellRendered = false;\r\n          \r\n          // Strategy 1: Try with original text\r\n          if (!cellRendered) {\r\n            try {\r\n              const textX = currentX + colWidth - textWidth - 5;\r\n              \r\n              page.drawText(displayText, {\r\n                x: Math.max(currentX + 5, textX),\r\n                y: currentY - 15,\r\n                size: textSize,\r\n                font: font,\r\n                color: rgb(0, 0, 0)\r\n              });\r\n              \r\n              cellRendered = true;\r\n            } catch (error) {\r\n              console.warn(`Cell text strategy 1 failed for \"${displayText}\":`, error);\r\n            }\r\n          }\r\n          \r\n          // Strategy 2: Try with cleaned text (for Arabic)\r\n          if (!cellRendered && this.detectArabicText(displayText)) {\r\n            try {\r\n              const cleanedText = this.cleanArabicForRendering(displayText);\r\n              const cleanedWidth = this.safeCalculateTextWidth(font, cleanedText, textSize);\r\n              const textX = currentX + colWidth - cleanedWidth - 5;\r\n              \r\n              page.drawText(cleanedText, {\r\n                x: Math.max(currentX + 5, textX),\r\n                y: currentY - 15,\r\n                size: textSize,\r\n                font: font,\r\n                color: rgb(0, 0, 0)\r\n              });\r\n              \r\n              cellRendered = true;\r\n            } catch (error) {\r\n              console.warn(`Cell text strategy 2 failed for \"${displayText}\":`, error);\r\n            }\r\n          }\r\n          \r\n          // Strategy 3: Simple left-aligned rendering\r\n          if (!cellRendered) {\r\n            try {\r\n              page.drawText(displayText, {\r\n                x: currentX + 5,\r\n                y: currentY - 15,\r\n                size: textSize,\r\n                font: font,\r\n                color: rgb(0, 0, 0)\r\n              });\r\n              \r\n              cellRendered = true;\r\n            } catch (error) {\r\n              console.warn(`Cell text strategy 3 failed for \"${displayText}\":`, error);\r\n              // Don't add fallback text - better to have empty cells than wrong data\r\n            }\r\n          }\r\n          \r\n          // Cell border\r\n          page.drawRectangle({\r\n            x: currentX,\r\n            y: currentY - rowHeight,\r\n            width: colWidth,\r\n            height: rowHeight,\r\n            borderColor: rgb(0.8, 0.8, 0.8),\r\n            borderWidth: 0.5\r\n          });\r\n          \r\n          currentX += colWidth;\r\n        });\r\n        \r\n        currentY -= rowHeight;\r\n        rowsDrawn++;\r\n      }\r\n      \r\n      // Final page footer\r\n      const totalPages = Math.ceil(config.data.length / maxRowsPerPage) || 1;\r\n      await this.drawSimpleFooter(page, config, pageNumber, totalPages, font, width, margin);\r\n      \r\n      // Save PDF\r\n      const pdfBytes = await pdfDoc.save();\r\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${config.fileName}.pdf`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      console.log('✅ PDF exported successfully with PRESERVED Arabic text!');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Direct Arabic PDF export failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async drawSimpleFooter(page: any, config: ExportConfig, currentPage: number, totalPages: number, font: any, pageWidth: number, margin: number): Promise<void> {\r\n    try {\r\n      const { rgb } = await import('pdf-lib');\r\n      const footerY = margin;\r\n      \r\n      // User name (left) - try Arabic first, fallback if needed\r\n      try {\r\n        const userText = `المستخدم: ${config.userName}`;\r\n        page.drawText(userText, {\r\n          x: margin,\r\n          y: footerY,\r\n          size: 8,\r\n          font: font,\r\n          color: rgb(0.4, 0.4, 0.4)\r\n        });\r\n      } catch (userError) {\r\n        page.drawText(`User: ${config.userName}`, {\r\n          x: margin,\r\n          y: footerY,\r\n          size: 8,\r\n          font: font,\r\n          color: rgb(0.4, 0.4, 0.4)\r\n        });\r\n      }\r\n      \r\n      // Page number (center)\r\n      const pageText = `Page ${currentPage} of ${totalPages}`;\r\n      const pageTextWidth = font.widthOfTextAtSize(pageText, 8);\r\n      page.drawText(pageText, {\r\n        x: (pageWidth - pageTextWidth) / 2,\r\n        y: footerY,\r\n        size: 8,\r\n        font: font,\r\n        color: rgb(0.4, 0.4, 0.4)\r\n      });\r\n      \r\n      // Date (right)\r\n      const dateText = this.formatDate(new Date(), 'yyyy-MM-dd HH:mm');\r\n      const dateTextWidth = font.widthOfTextAtSize(dateText, 8);\r\n      page.drawText(dateText, {\r\n        x: pageWidth - margin - dateTextWidth,\r\n        y: footerY,\r\n        size: 8,\r\n        font: font,\r\n        color: rgb(0.4, 0.4, 0.4)\r\n      });\r\n    } catch (footerError) {\r\n      console.warn('Footer drawing failed:', footerError);\r\n    }\r\n  }\r\n\r\n  private safeCalculateTextWidth(font: any, text: string, size: number): number {\r\n    try {\r\n      return font.widthOfTextAtSize(text, size);\r\n    } catch (error) {\r\n      // Fallback calculation based on character count\r\n      return text.length * size * 0.6;\r\n    }\r\n  }\r\n\r\n  private cleanArabicForRendering(text: string): string {\r\n    if (!text) return text;\r\n    \r\n    // Remove problematic characters that might cause rendering issues\r\n    return text\r\n      .replace(/[\\u064B-\\u0652]/g, '') // Remove most diacritics\r\n      .replace(/[\\u0653-\\u0655]/g, '') // Remove additional marks  \r\n      .replace(/[\\u0670\\u0640]/g, '') // Remove elongation marks\r\n      .replace(/\\u200C/g, '') // Remove zero-width non-joiner\r\n      .replace(/\\u200D/g, '') // Remove zero-width joiner\r\n      .normalize('NFKC') // Normalize Unicode\r\n      .trim();\r\n  }\r\n\r\n  private detectArabicText(text: string): boolean {\r\n    if (!text) return false;\r\n    // Check for Arabic characters (U+0600 to U+06FF)\r\n    return /[\\u0600-\\u06FF]/.test(text);\r\n  }\r\n\r\n  private processTextForPDF(text: string): { text: string; alignment?: string } {\r\n    const hasArabic = this.detectArabicText(text);\r\n    \r\n    if (hasArabic) {\r\n      return {\r\n        text: text,\r\n        alignment: 'right'\r\n      };\r\n    } else {\r\n      return {\r\n        text: text,\r\n        alignment: 'left'\r\n      };\r\n    }\r\n  }\r\n\r\n\r\n\r\n  private async exportToPDFWithModernLib(config: ExportConfig): Promise<void> {\r\n    try {\r\n      console.log('Using modern pdf-lib with native Arabic text support...');\r\n      \r\n      // Import the modern pdf-lib\r\n      const { PDFDocument, rgb } = await import('pdf-lib');\r\n      \r\n      // Create a new PDF document\r\n      const pdfDoc = await PDFDocument.create();\r\n      \r\n      // Add a page with landscape orientation\r\n      let page = pdfDoc.addPage([842, 595]); // A4 landscape (595 x 842 mm -> points)\r\n      \r\n      // Get page dimensions\r\n      const { width, height } = page.getSize();\r\n      const margin = 40;\r\n      const contentWidth = width - (2 * margin);\r\n      const contentHeight = height - (2 * margin);\r\n      \r\n      // Embed Arabic-compatible font with multiple strategies\r\n      let font, fontBold;\r\n      let useArabicFont = false;\r\n      \r\n      try {\r\n        // Strategy 1: Try to load custom Arabic font\r\n        const fontBytes = await this.loadArabicFont();\r\n        font = await pdfDoc.embedFont(fontBytes);\r\n        fontBold = font; // Use same font for bold (Arabic fonts often handle weight internally)\r\n        useArabicFont = true;\r\n        console.log('✅ Arabic-compatible font embedded successfully');\r\n      } catch (fontError) {\r\n        console.warn('❌ Arabic font embedding failed, trying advanced built-in fonts:', fontError);\r\n        try {\r\n          // Strategy 2: Try TimesRoman which has better Unicode support\r\n          const { StandardFonts } = await import('pdf-lib');\r\n          font = await pdfDoc.embedFont(StandardFonts.TimesRoman);\r\n          fontBold = await pdfDoc.embedFont(StandardFonts.TimesRomanBold);\r\n          useArabicFont = true; // TimesRoman has decent Arabic support\r\n          console.log('⚠️ Using TimesRoman font with Unicode support');\r\n        } catch (timesError) {\r\n          console.warn('❌ TimesRoman failed, trying Helvetica');\r\n          try {\r\n            // Strategy 3: Try Helvetica (sometimes better than Courier for Arabic)\r\n            const { StandardFonts: StandardFontsBackup } = await import('pdf-lib');\r\n            font = await pdfDoc.embedFont(StandardFontsBackup.Helvetica);\r\n            fontBold = await pdfDoc.embedFont(StandardFontsBackup.HelveticaBold);\r\n            useArabicFont = true; // Give it a chance with Arabic\r\n            console.log('⚠️ Using Helvetica font - attempting Arabic support');\r\n          } catch (helveticaError) {\r\n            console.warn('❌ All font strategies failed, using enhanced Arabic text processing');\r\n            // Don't fall back to text conversion, instead use Courier with enhanced text processing\r\n            const { StandardFonts: FinalFallback } = await import('pdf-lib');\r\n            font = await pdfDoc.embedFont(FinalFallback.Courier);\r\n            fontBold = font;\r\n            useArabicFont = true; // We'll process the text better\r\n            console.log('⚠️ Using Courier font with enhanced Arabic text processing');\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Title (preserve original Arabic text)\r\n      const titleFontSize = 20;\r\n      const titleText = config.title; // Keep original Arabic\r\n      const titleWidth = this.safeGetTextWidth(font, titleText, titleFontSize);\r\n      \r\n      this.safeDrawText(page, titleText, {\r\n        x: (width - titleWidth) / 2,\r\n        y: height - margin - 30,\r\n        size: titleFontSize,\r\n        font: fontBold,\r\n        color: rgb(0.2, 0.3, 0.5)\r\n      });\r\n      \r\n      // Subtitle if exists (preserve original Arabic text)\r\n      let currentY = height - margin - 60;\r\n      if (config.subtitle) {\r\n        const subtitleText = config.subtitle; // Keep original Arabic\r\n        const subtitleWidth = this.safeGetTextWidth(font, subtitleText, 14);\r\n        this.safeDrawText(page, subtitleText, {\r\n          x: (width - subtitleWidth) / 2,\r\n          y: currentY,\r\n          size: 14,\r\n          font: font,\r\n          color: rgb(0.4, 0.4, 0.4)\r\n        });\r\n        currentY -= 25;\r\n      }\r\n      \r\n      // Date\r\n      const dateText = config.currentDate || this.formatDate(new Date(), 'yyyy-MM-dd');\r\n      const dateWidth = this.safeGetTextWidth(font, dateText, 12);\r\n      this.safeDrawText(page, dateText, {\r\n        x: (width - dateWidth) / 2,\r\n        y: currentY,\r\n        size: 12,\r\n        font: font,\r\n        color: rgb(0.5, 0.5, 0.5)\r\n      });\r\n      \r\n      currentY -= 40;\r\n      \r\n      // Calculate table layout\r\n      const colCount = config.columns.length;\r\n      const colWidth = contentWidth / colCount;\r\n      const rowHeight = 25;\r\n      const headerHeight = 30;\r\n      \r\n      // Draw table header background\r\n      page.drawRectangle({\r\n        x: margin,\r\n        y: currentY - headerHeight,\r\n        width: contentWidth,\r\n        height: headerHeight,\r\n        color: rgb(0.2, 0.4, 0.7)\r\n      });\r\n      \r\n      // Draw headers with white text (preserve original Arabic)\r\n      let currentX = margin;\r\n      config.columns.forEach((col, index) => {\r\n        // Header text (keep original Arabic)\r\n        const headerText = col.title; // Keep original Arabic\r\n        const textSize = 11;\r\n        const textWidth = this.safeGetTextWidth(font, headerText, textSize);\r\n        \r\n        // Right-align text for Arabic support\r\n        const textX = currentX + colWidth - 10 - textWidth;\r\n        \r\n        this.safeDrawText(page, headerText, {\r\n          x: Math.max(currentX + 5, textX),\r\n          y: currentY - 18,\r\n          size: textSize,\r\n          font: fontBold,\r\n          color: rgb(1, 1, 1) // White text\r\n        });\r\n        \r\n        // Draw column separator\r\n        if (index < colCount - 1) {\r\n          page.drawLine({\r\n            start: { x: currentX + colWidth, y: currentY },\r\n            end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n            thickness: 1,\r\n            color: rgb(0.8, 0.8, 0.8)\r\n          });\r\n        }\r\n        \r\n        currentX += colWidth;\r\n      });\r\n      \r\n      currentY -= headerHeight;\r\n      \r\n      // Calculate how many rows fit on the page\r\n      const availableHeight = currentY - margin - 50; // Leave space for footer\r\n      const maxRowsPerPage = Math.floor(availableHeight / rowHeight);\r\n      let rowsDrawn = 0;\r\n      let pageNumber = 1;\r\n      \r\n      // Draw data rows\r\n      for (let i = 0; i < config.data.length; i++) {\r\n        const row = config.data[i];\r\n        \r\n        // Check if we need a new page\r\n        if (rowsDrawn >= maxRowsPerPage) {\r\n          // Add footer to current page\r\n          await this.addModernPDFFooter(page, config, pageNumber, Math.ceil(config.data.length / maxRowsPerPage), font, width, margin);\r\n          \r\n          // Add new page\r\n          const newPage = pdfDoc.addPage([842, 595]);\r\n          page = newPage; // Update current page reference\r\n          currentY = height - margin - 40;\r\n          rowsDrawn = 0;\r\n          pageNumber++;\r\n          \r\n          // Redraw headers on new page\r\n          newPage.drawRectangle({\r\n            x: margin,\r\n            y: currentY - headerHeight,\r\n            width: contentWidth,\r\n            height: headerHeight,\r\n            color: rgb(0.2, 0.4, 0.7)\r\n          });\r\n          \r\n          currentX = margin;\r\n          config.columns.forEach((col, index) => {\r\n            const headerText = col.title; // Keep original Arabic\r\n            const textSize = 11;\r\n            const textWidth = this.safeGetTextWidth(font, headerText, textSize);\r\n            const textX = currentX + colWidth - 10 - textWidth;\r\n            \r\n            this.safeDrawText(page, headerText, {\r\n              x: Math.max(currentX + 5, textX),\r\n              y: currentY - 18,\r\n              size: textSize,\r\n              font: fontBold,\r\n              color: rgb(1, 1, 1)\r\n            });\r\n            \r\n            if (index < colCount - 1) {\r\n              newPage.drawLine({\r\n                start: { x: currentX + colWidth, y: currentY },\r\n                end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n                thickness: 1,\r\n                color: rgb(0.8, 0.8, 0.8)\r\n              });\r\n            }\r\n            \r\n            currentX += colWidth;\r\n          });\r\n          \r\n          currentY -= headerHeight;\r\n        }\r\n        \r\n        // Alternating row background\r\n        if (i % 2 === 0) {\r\n          page.drawRectangle({\r\n            x: margin,\r\n            y: currentY - rowHeight,\r\n            width: contentWidth,\r\n            height: rowHeight,\r\n            color: rgb(0.95, 0.95, 0.95)\r\n          });\r\n        }\r\n        \r\n        // Draw row data (preserve original Arabic text)\r\n        currentX = margin;\r\n        config.columns.forEach((col, colIndex) => {\r\n          const cellValue = this.getCellValue(row, col, i + 1).toString();\r\n          const displayValue = cellValue; // Keep original Arabic\r\n          const textSize = 10;\r\n          \r\n          // Truncate text if too long\r\n          let displayText = displayValue;\r\n          const maxWidth = colWidth - 10;\r\n          let textWidth = this.safeGetTextWidth(font, displayText, textSize);\r\n          \r\n          while (textWidth > maxWidth && displayText.length > 1) {\r\n            displayText = displayText.slice(0, -1);\r\n            textWidth = this.safeGetTextWidth(font, displayText + '...', textSize);\r\n          }\r\n          if (displayText !== displayValue) {\r\n            displayText = displayText + '...';\r\n          }\r\n          \r\n          // Right-align for Arabic support\r\n          textWidth = this.safeGetTextWidth(font, displayText, textSize);\r\n          const textX = currentX + colWidth - 5 - textWidth;\r\n          \r\n          this.safeDrawText(page, displayText, {\r\n            x: Math.max(currentX + 5, textX),\r\n            y: currentY - 15,\r\n            size: textSize,\r\n            font: font,\r\n            color: rgb(0, 0, 0)\r\n          });\r\n          \r\n          // Draw cell border\r\n          page.drawRectangle({\r\n            x: currentX,\r\n            y: currentY - rowHeight,\r\n            width: colWidth,\r\n            height: rowHeight,\r\n            borderColor: rgb(0.8, 0.8, 0.8),\r\n            borderWidth: 0.5\r\n          });\r\n          \r\n          currentX += colWidth;\r\n        });\r\n        \r\n        currentY -= rowHeight;\r\n        rowsDrawn++;\r\n      }\r\n      \r\n      // Add footer to last page\r\n      const totalPages = Math.ceil(config.data.length / maxRowsPerPage) || 1;\r\n      this.addModernPDFFooter(page, config, pageNumber, totalPages, font, width, margin);\r\n      \r\n      // Save and download PDF\r\n      const pdfBytes = await pdfDoc.save();\r\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${config.fileName}.pdf`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      console.log('PDF exported successfully with pdf-lib!');\r\n      \r\n    } catch (error) {\r\n      console.error('Modern PDF Export Error:', error);\r\n      // Don't automatically fall back to text conversion, let the main handler try alternative method\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async exportToPDFWithAlternativeMethod(config: ExportConfig): Promise<void> {\r\n    try {\r\n      console.log('Using alternative PDF export method with enhanced Arabic support...');\r\n      \r\n      // Import the modern pdf-lib\r\n      const { PDFDocument, rgb, StandardFonts } = await import('pdf-lib');\r\n      \r\n      // Create a new PDF document\r\n      const pdfDoc = await PDFDocument.create();\r\n      \r\n      // Add a page with landscape orientation\r\n      let page = pdfDoc.addPage([842, 595]); // A4 landscape\r\n      \r\n      // Get page dimensions\r\n      const { width, height } = page.getSize();\r\n      const margin = 40;\r\n      const contentWidth = width - (2 * margin);\r\n      \r\n      // Use Helvetica font which has better Unicode support than previously thought\r\n      const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\r\n      const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\r\n      \r\n      console.log('✅ Using Helvetica with enhanced Arabic text processing');\r\n      \r\n      // Title - use enhanced text processing\r\n      const titleFontSize = 20;\r\n      const titleText = this.enhancedArabicTextProcessing(config.title);\r\n      const titleWidth = this.safeGetTextWidth(font, titleText, titleFontSize);\r\n      \r\n      this.safeDrawText(page, titleText, {\r\n        x: (width - titleWidth) / 2,\r\n        y: height - margin - 30,\r\n        size: titleFontSize,\r\n        font: fontBold,\r\n        color: rgb(0.2, 0.3, 0.5)\r\n      });\r\n      \r\n      // Subtitle if exists\r\n      let currentY = height - margin - 60;\r\n      if (config.subtitle) {\r\n        const subtitleText = this.enhancedArabicTextProcessing(config.subtitle);\r\n        const subtitleWidth = this.safeGetTextWidth(font, subtitleText, 14);\r\n        this.safeDrawText(page, subtitleText, {\r\n          x: (width - subtitleWidth) / 2,\r\n          y: currentY,\r\n          size: 14,\r\n          font: font,\r\n          color: rgb(0.4, 0.4, 0.4)\r\n        });\r\n        currentY -= 25;\r\n      }\r\n      \r\n      // Date\r\n      const dateText = config.currentDate || this.formatDate(new Date(), 'yyyy-MM-dd');\r\n      const dateWidth = this.safeGetTextWidth(font, dateText, 12);\r\n      this.safeDrawText(page, dateText, {\r\n        x: (width - dateWidth) / 2,\r\n        y: currentY,\r\n        size: 12,\r\n        font: font,\r\n        color: rgb(0.5, 0.5, 0.5)\r\n      });\r\n      \r\n      currentY -= 40;\r\n      \r\n      // Calculate table layout\r\n      const colCount = config.columns.length;\r\n      const colWidth = contentWidth / colCount;\r\n      const rowHeight = 25;\r\n      const headerHeight = 30;\r\n      \r\n      // Draw table header background\r\n      page.drawRectangle({\r\n        x: margin,\r\n        y: currentY - headerHeight,\r\n        width: contentWidth,\r\n        height: headerHeight,\r\n        color: rgb(0.2, 0.4, 0.7)\r\n      });\r\n      \r\n      // Draw headers with enhanced Arabic processing\r\n      let currentX = margin;\r\n      config.columns.forEach((col, index) => {\r\n        const headerText = this.enhancedArabicTextProcessing(col.title);\r\n        const textSize = 11;\r\n        const textWidth = this.safeGetTextWidth(font, headerText, textSize);\r\n        \r\n        // Right-align for Arabic content\r\n        const textX = currentX + colWidth - 10 - textWidth;\r\n        \r\n        this.safeDrawText(page, headerText, {\r\n          x: Math.max(currentX + 5, textX),\r\n          y: currentY - 18,\r\n          size: textSize,\r\n          font: fontBold,\r\n          color: rgb(1, 1, 1)\r\n        });\r\n        \r\n        // Draw column separator\r\n        if (index < colCount - 1) {\r\n          page.drawLine({\r\n            start: { x: currentX + colWidth, y: currentY },\r\n            end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n            thickness: 1,\r\n            color: rgb(0.8, 0.8, 0.8)\r\n          });\r\n        }\r\n        \r\n        currentX += colWidth;\r\n      });\r\n      \r\n      currentY -= headerHeight;\r\n      \r\n      // Calculate how many rows fit on the page\r\n      const availableHeight = currentY - margin - 50;\r\n      const maxRowsPerPage = Math.floor(availableHeight / rowHeight);\r\n      let rowsDrawn = 0;\r\n      let pageNumber = 1;\r\n      \r\n      // Draw data rows with enhanced Arabic processing\r\n      for (let i = 0; i < config.data.length; i++) {\r\n        const row = config.data[i];\r\n        \r\n        // Check if we need a new page\r\n        if (rowsDrawn >= maxRowsPerPage) {\r\n          // Add footer to current page\r\n          await this.addEnhancedPDFFooter(page, config, pageNumber, Math.ceil(config.data.length / maxRowsPerPage), font, width, margin);\r\n          \r\n          // Add new page\r\n          page = pdfDoc.addPage([842, 595]);\r\n          currentY = height - margin - 40;\r\n          rowsDrawn = 0;\r\n          pageNumber++;\r\n          \r\n          // Redraw headers on new page\r\n          page.drawRectangle({\r\n            x: margin,\r\n            y: currentY - headerHeight,\r\n            width: contentWidth,\r\n            height: headerHeight,\r\n            color: rgb(0.2, 0.4, 0.7)\r\n          });\r\n          \r\n          currentX = margin;\r\n          config.columns.forEach((col, index) => {\r\n            const headerText = this.enhancedArabicTextProcessing(col.title);\r\n            const textSize = 11;\r\n            const textWidth = this.safeGetTextWidth(font, headerText, textSize);\r\n            const textX = currentX + colWidth - 10 - textWidth;\r\n            \r\n            this.safeDrawText(page, headerText, {\r\n              x: Math.max(currentX + 5, textX),\r\n              y: currentY - 18,\r\n              size: textSize,\r\n              font: fontBold,\r\n              color: rgb(1, 1, 1)\r\n            });\r\n            \r\n            if (index < colCount - 1) {\r\n              page.drawLine({\r\n                start: { x: currentX + colWidth, y: currentY },\r\n                end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n                thickness: 1,\r\n                color: rgb(0.8, 0.8, 0.8)\r\n              });\r\n            }\r\n            \r\n            currentX += colWidth;\r\n          });\r\n          \r\n          currentY -= headerHeight;\r\n        }\r\n        \r\n        // Alternating row background\r\n        if (i % 2 === 0) {\r\n          page.drawRectangle({\r\n            x: margin,\r\n            y: currentY - rowHeight,\r\n            width: contentWidth,\r\n            height: rowHeight,\r\n            color: rgb(0.95, 0.95, 0.95)\r\n          });\r\n        }\r\n        \r\n        // Draw row data with enhanced Arabic processing\r\n        currentX = margin;\r\n        config.columns.forEach((col, colIndex) => {\r\n          const cellValue = this.getCellValue(row, col, i + 1).toString();\r\n          const displayValue = this.enhancedArabicTextProcessing(cellValue);\r\n          const textSize = 10;\r\n          \r\n          // Truncate text if too long\r\n          let displayText = displayValue;\r\n          const maxWidth = colWidth - 10;\r\n          let textWidth = this.safeGetTextWidth(font, displayText, textSize);\r\n          \r\n          while (textWidth > maxWidth && displayText.length > 1) {\r\n            displayText = displayText.slice(0, -1);\r\n            textWidth = this.safeGetTextWidth(font, displayText + '...', textSize);\r\n          }\r\n          if (displayText !== displayValue) {\r\n            displayText = displayText + '...';\r\n          }\r\n          \r\n          // Right-align for Arabic support\r\n          textWidth = this.safeGetTextWidth(font, displayText, textSize);\r\n          const textX = currentX + colWidth - 5 - textWidth;\r\n          \r\n          this.safeDrawText(page, displayText, {\r\n            x: Math.max(currentX + 5, textX),\r\n            y: currentY - 15,\r\n            size: textSize,\r\n            font: font,\r\n            color: rgb(0, 0, 0)\r\n          });\r\n          \r\n          // Draw cell border\r\n          page.drawRectangle({\r\n            x: currentX,\r\n            y: currentY - rowHeight,\r\n            width: colWidth,\r\n            height: rowHeight,\r\n            borderColor: rgb(0.8, 0.8, 0.8),\r\n            borderWidth: 0.5\r\n          });\r\n          \r\n          currentX += colWidth;\r\n        });\r\n        \r\n        currentY -= rowHeight;\r\n        rowsDrawn++;\r\n      }\r\n      \r\n      // Add footer to last page\r\n      const totalPages = Math.ceil(config.data.length / maxRowsPerPage) || 1;\r\n      await this.addEnhancedPDFFooter(page, config, pageNumber, totalPages, font, width, margin);\r\n      \r\n      // Save and download PDF\r\n      const pdfBytes = await pdfDoc.save();\r\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${config.fileName}.pdf`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      console.log('PDF exported successfully with enhanced Arabic method!');\r\n      \r\n    } catch (error) {\r\n      console.error('Alternative PDF Export Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private generateHTMLTable(config: ExportConfig): string {\r\n    const titleStyle = 'text-align: center; color: #1F4E79; font-size: 18px; font-weight: bold; margin: 10px 0;';\r\n    const headerStyle = 'background-color: #4472C4; color: white; padding: 8px; text-align: center; font-weight: bold;';\r\n    const cellStyle = 'padding: 6px; border: 1px solid #ddd; text-align: center;';\r\n    const tableStyle = 'width: 100%; border-collapse: collapse; margin: 10px 0; font-family: Arial, \"Noto Sans Arabic\", serif;';\r\n    \r\n    let html = `\r\n      <div style=\"direction: rtl; text-align: right;\">\r\n        <div style=\"${titleStyle}\">${config.title}</div>\r\n        ${config.subtitle ? `<div style=\"text-align: center; margin: 5px 0; color: #666;\">${config.subtitle}</div>` : ''}\r\n        <div style=\"text-align: center; margin: 5px 0; color: #888; font-size: 12px;\">${config.currentDate || new Date().toLocaleDateString()}</div>\r\n        \r\n        <table style=\"${tableStyle}\">\r\n          <thead>\r\n            <tr>\r\n              ${config.columns.map(col => `<th style=\"${headerStyle}\">${col.title}</th>`).join('')}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n    `;\r\n    \r\n    config.data.forEach((row, index) => {\r\n      const bgColor = index % 2 === 0 ? '#f8f9fa' : '#ffffff';\r\n      html += '<tr>';\r\n      \r\n      config.columns.forEach(col => {\r\n        const cellValue = this.getCellValue(row, col, index + 1);\r\n        html += `<td style=\"${cellStyle} background-color: ${bgColor};\">${cellValue}</td>`;\r\n      });\r\n      \r\n      html += '</tr>';\r\n    });\r\n    \r\n    html += `\r\n          </tbody>\r\n        </table>\r\n        \r\n        <div style=\"margin-top: 20px; font-size: 10px; color: #666;\">\r\n          <div>المستخدم: ${config.userName}</div>\r\n          <div>تاريخ التصدير: ${new Date().toLocaleString('ar-SA')}</div>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return html;\r\n  }\r\n\r\n  private enhancedArabicTextProcessing(text: string): string {\r\n    if (!text) return '';\r\n    \r\n    // Multi-stage Arabic text processing that tries to preserve Arabic characters\r\n    try {\r\n      // Stage 1: Clean up problematic characters while preserving main text\r\n      let processed = this.cleanArabicTextForPDF(text);\r\n      \r\n      // Stage 2: Check if the cleaned text still has Arabic characters\r\n      const hasArabicAfterClean = /[\\u0600-\\u06FF]/.test(processed);\r\n      \r\n      if (hasArabicAfterClean) {\r\n        // Try to keep the Arabic text with basic fixes\r\n        processed = processed\r\n          .normalize('NFKC') // Normalize Unicode\r\n          .replace(/[\\u200C\\u200D]/g, '') // Remove zero-width joiners\r\n          .replace(/\\s+/g, ' ') // Normalize spaces\r\n          .trim();\r\n        \r\n        console.log('✅ Preserved Arabic text with basic cleaning');\r\n        return processed;\r\n      } else {\r\n        // If cleaning removed all Arabic, use smart transliteration\r\n        console.log('⚠️ Arabic text lost during cleaning, using smart transliteration');\r\n        return this.smartArabicTransliteration(text);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Enhanced Arabic processing failed, using fallback:', error);\r\n      return this.smartArabicTransliteration(text);\r\n    }\r\n  }\r\n\r\n  private async addEnhancedPDFFooter(page: any, config: ExportConfig, currentPage: number, totalPages: number, font: any, pageWidth: number, margin: number): Promise<void> {\r\n    const { rgb } = await import('pdf-lib');\r\n    const footerY = margin;\r\n    \r\n    // User name (left) - use enhanced processing\r\n    const userText = this.enhancedArabicTextProcessing(`المستخدم: ${config.userName}`);\r\n    this.safeDrawText(page, userText, {\r\n      x: margin,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n    \r\n    // Page number (center) - use enhanced processing\r\n    const pageText = this.enhancedArabicTextProcessing(`صفحة ${currentPage} من ${totalPages}`);\r\n    const pageTextWidth = this.safeGetTextWidth(font, pageText, 8);\r\n    this.safeDrawText(page, pageText, {\r\n      x: (pageWidth - pageTextWidth) / 2,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n    \r\n    // Export date (right) - use enhanced processing\r\n    const exportText = this.enhancedArabicTextProcessing(`تاريخ التصدير: ${this.formatDate(new Date(), 'yyyy-MM-dd HH:mm')}`);\r\n    const exportTextWidth = this.safeGetTextWidth(font, exportText, 8);\r\n    this.safeDrawText(page, exportText, {\r\n      x: pageWidth - margin - exportTextWidth,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n  }\r\n\r\n  private async exportToPDFWithTextConversion(config: ExportConfig): Promise<void> {\r\n    try {\r\n      console.log('Using PDF export with Arabic text conversion...');\r\n      \r\n      // Import the modern pdf-lib\r\n      const { PDFDocument, rgb, StandardFonts } = await import('pdf-lib');\r\n      \r\n      // Create a new PDF document\r\n      const pdfDoc = await PDFDocument.create();\r\n      \r\n      // Add a page with landscape orientation\r\n      let page = pdfDoc.addPage([842, 595]); // A4 landscape\r\n      \r\n      // Get page dimensions\r\n      const { width, height } = page.getSize();\r\n      const margin = 40;\r\n      const contentWidth = width - (2 * margin);\r\n      \r\n      // Use standard Helvetica font\r\n      const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\r\n      const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\r\n      \r\n      // Title (convert Arabic to English)\r\n      const titleFontSize = 20;\r\n      const titleText = this.convertArabicToProfessionalEnglish(config.title);\r\n      const titleWidth = font.widthOfTextAtSize(titleText, titleFontSize);\r\n      \r\n      page.drawText(titleText, {\r\n        x: (width - titleWidth) / 2,\r\n        y: height - margin - 30,\r\n        size: titleFontSize,\r\n        font: fontBold,\r\n        color: rgb(0.2, 0.3, 0.5)\r\n      });\r\n      \r\n      // Subtitle if exists\r\n      let currentY = height - margin - 60;\r\n      if (config.subtitle) {\r\n        const subtitleText = this.convertArabicToProfessionalEnglish(config.subtitle);\r\n        const subtitleWidth = font.widthOfTextAtSize(subtitleText, 14);\r\n        page.drawText(subtitleText, {\r\n          x: (width - subtitleWidth) / 2,\r\n          y: currentY,\r\n          size: 14,\r\n          font: font,\r\n          color: rgb(0.4, 0.4, 0.4)\r\n        });\r\n        currentY -= 25;\r\n      }\r\n      \r\n      // Date\r\n      const dateText = config.currentDate || this.formatDate(new Date(), 'yyyy-MM-dd');\r\n      const dateWidth = font.widthOfTextAtSize(dateText, 12);\r\n      page.drawText(dateText, {\r\n        x: (width - dateWidth) / 2,\r\n        y: currentY,\r\n        size: 12,\r\n        font: font,\r\n        color: rgb(0.5, 0.5, 0.5)\r\n      });\r\n      \r\n      currentY -= 40;\r\n      \r\n      // Calculate table layout\r\n      const colCount = config.columns.length;\r\n      const colWidth = contentWidth / colCount;\r\n      const rowHeight = 25;\r\n      const headerHeight = 30;\r\n      \r\n      // Draw table header background\r\n      page.drawRectangle({\r\n        x: margin,\r\n        y: currentY - headerHeight,\r\n        width: contentWidth,\r\n        height: headerHeight,\r\n        color: rgb(0.2, 0.4, 0.7)\r\n      });\r\n      \r\n      // Draw headers with converted text\r\n      let currentX = margin;\r\n      config.columns.forEach((col, index) => {\r\n        // Convert Arabic header to English\r\n        const headerText = this.convertArabicToProfessionalEnglish(col.title);\r\n        const textSize = 11;\r\n        const textWidth = font.widthOfTextAtSize(headerText, textSize);\r\n        \r\n        // Center-align text for better readability\r\n        const textX = currentX + (colWidth - textWidth) / 2;\r\n        \r\n        page.drawText(headerText, {\r\n          x: Math.max(currentX + 5, textX),\r\n          y: currentY - 18,\r\n          size: textSize,\r\n          font: fontBold,\r\n          color: rgb(1, 1, 1) // White text\r\n        });\r\n        \r\n        // Draw column separator\r\n        if (index < colCount - 1) {\r\n          page.drawLine({\r\n            start: { x: currentX + colWidth, y: currentY },\r\n            end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n            thickness: 1,\r\n            color: rgb(0.8, 0.8, 0.8)\r\n          });\r\n        }\r\n        \r\n        currentX += colWidth;\r\n      });\r\n      \r\n      currentY -= headerHeight;\r\n      \r\n      // Calculate rows per page\r\n      const availableHeight = currentY - margin - 50;\r\n      const maxRowsPerPage = Math.floor(availableHeight / rowHeight);\r\n      let rowsDrawn = 0;\r\n      let pageNumber = 1;\r\n      \r\n      // Draw data rows\r\n      for (let i = 0; i < config.data.length; i++) {\r\n        const row = config.data[i];\r\n        \r\n        // Check if we need a new page\r\n        if (rowsDrawn >= maxRowsPerPage) {\r\n          // Add footer to current page\r\n          await this.addConvertedPDFFooter(page, config, pageNumber, Math.ceil(config.data.length / maxRowsPerPage), font, width, margin);\r\n          \r\n          // Add new page\r\n          page = pdfDoc.addPage([842, 595]);\r\n          currentY = height - margin - 40;\r\n          rowsDrawn = 0;\r\n          pageNumber++;\r\n          \r\n          // Redraw headers on new page\r\n          page.drawRectangle({\r\n            x: margin,\r\n            y: currentY - headerHeight,\r\n            width: contentWidth,\r\n            height: headerHeight,\r\n            color: rgb(0.2, 0.4, 0.7)\r\n          });\r\n          \r\n          currentX = margin;\r\n          config.columns.forEach((col, index) => {\r\n            const headerText = this.convertArabicToProfessionalEnglish(col.title); // Convert Arabic to English\r\n            const textSize = 11;\r\n            const textWidth = font.widthOfTextAtSize(headerText, textSize);\r\n            const textX = currentX + (colWidth - textWidth) / 2;\r\n            \r\n            page.drawText(headerText, {\r\n              x: Math.max(currentX + 5, textX),\r\n              y: currentY - 18,\r\n              size: textSize,\r\n              font: fontBold,\r\n              color: rgb(1, 1, 1)\r\n            });\r\n            \r\n            if (index < colCount - 1) {\r\n              page.drawLine({\r\n                start: { x: currentX + colWidth, y: currentY },\r\n                end: { x: currentX + colWidth, y: currentY - headerHeight },\r\n                thickness: 1,\r\n                color: rgb(0.8, 0.8, 0.8)\r\n              });\r\n            }\r\n            \r\n            currentX += colWidth;\r\n          });\r\n          \r\n          currentY -= headerHeight;\r\n        }\r\n        \r\n        // Alternating row background\r\n        if (i % 2 === 0) {\r\n          page.drawRectangle({\r\n            x: margin,\r\n            y: currentY - rowHeight,\r\n            width: contentWidth,\r\n            height: rowHeight,\r\n            color: rgb(0.95, 0.95, 0.95)\r\n          });\r\n        }\r\n        \r\n        // Draw row data with text conversion\r\n        currentX = margin;\r\n        config.columns.forEach((col, colIndex) => {\r\n          const cellValue = this.getCellValue(row, col, i + 1).toString();\r\n          // Convert Arabic text to English\r\n          const convertedText = this.convertArabicToProfessionalEnglish(cellValue);\r\n          const textSize = 10;\r\n          \r\n          // Truncate text if too long\r\n          let displayText = convertedText;\r\n          const maxWidth = colWidth - 10;\r\n          let textWidth = font.widthOfTextAtSize(displayText, textSize);\r\n          \r\n          while (textWidth > maxWidth && displayText.length > 1) {\r\n            displayText = displayText.slice(0, -1);\r\n            textWidth = font.widthOfTextAtSize(displayText + '...', textSize);\r\n          }\r\n          if (displayText !== convertedText) {\r\n            displayText = displayText + '...';\r\n          }\r\n          \r\n          // Center-align for better readability\r\n          textWidth = font.widthOfTextAtSize(displayText, textSize);\r\n          const textX = currentX + (colWidth - textWidth) / 2;\r\n          \r\n          page.drawText(displayText, {\r\n            x: Math.max(currentX + 5, textX),\r\n            y: currentY - 15,\r\n            size: textSize,\r\n            font: font,\r\n            color: rgb(0, 0, 0)\r\n          });\r\n          \r\n          // Draw cell border\r\n          page.drawRectangle({\r\n            x: currentX,\r\n            y: currentY - rowHeight,\r\n            width: colWidth,\r\n            height: rowHeight,\r\n            borderColor: rgb(0.8, 0.8, 0.8),\r\n            borderWidth: 0.5\r\n          });\r\n          \r\n          currentX += colWidth;\r\n        });\r\n        \r\n        currentY -= rowHeight;\r\n        rowsDrawn++;\r\n      }\r\n      \r\n      // Add footer to last page\r\n      const totalPages = Math.ceil(config.data.length / maxRowsPerPage) || 1;\r\n      await this.addConvertedPDFFooter(page, config, pageNumber, totalPages, font, width, margin);\r\n      \r\n      // Save and download PDF\r\n      const pdfBytes = await pdfDoc.save();\r\n      const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n      const url = URL.createObjectURL(blob);\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.download = `${config.fileName}.pdf`;\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      URL.revokeObjectURL(url);\r\n      \r\n      console.log('PDF exported successfully with text conversion!');\r\n      \r\n    } catch (error) {\r\n      console.error('Fallback PDF Export Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async addConvertedPDFFooter(page: any, config: ExportConfig, currentPage: number, totalPages: number, font: any, pageWidth: number, margin: number): Promise<void> {\r\n    const { rgb } = await import('pdf-lib');\r\n    const footerY = margin;\r\n    \r\n    // Convert footer text to English\r\n    const userText = this.convertArabicToProfessionalEnglish(`المستخدم: ${config.userName}`);\r\n    page.drawText(userText, {\r\n      x: margin,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n    \r\n    // Page number (center)\r\n    const pageText = `Page ${currentPage} of ${totalPages}`;\r\n    const pageTextWidth = font.widthOfTextAtSize(pageText, 8);\r\n    page.drawText(pageText, {\r\n      x: (pageWidth - pageTextWidth) / 2,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n    \r\n    // Export date (right)\r\n    const exportText = `Export Date: ${this.formatDate(new Date(), 'yyyy-MM-dd HH:mm')}`;\r\n    const exportTextWidth = font.widthOfTextAtSize(exportText, 8);\r\n    page.drawText(exportText, {\r\n      x: pageWidth - margin - exportTextWidth,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n  }\r\n\r\n  private async addModernPDFFooter(page: any, config: ExportConfig, currentPage: number, totalPages: number, font: any, pageWidth: number, margin: number): Promise<void> {\r\n    const { rgb } = await import('pdf-lib');\r\n    const footerY = margin;\r\n    \r\n    // User name (left) - keep Arabic\r\n    const userText = `المستخدم: ${config.userName}`;\r\n    this.safeDrawText(page, userText, {\r\n      x: margin,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n    \r\n    // Page number (center) - keep Arabic\r\n    const pageText = `صفحة ${currentPage} من ${totalPages}`;\r\n    const pageTextWidth = this.safeGetTextWidth(font, pageText, 8);\r\n    this.safeDrawText(page, pageText, {\r\n      x: (pageWidth - pageTextWidth) / 2,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n    \r\n    // Export date (right) - keep Arabic\r\n    const exportText = `تاريخ التصدير: ${this.formatDate(new Date(), 'yyyy-MM-dd HH:mm')}`;\r\n    const exportTextWidth = this.safeGetTextWidth(font, exportText, 8);\r\n    this.safeDrawText(page, exportText, {\r\n      x: pageWidth - margin - exportTextWidth,\r\n      y: footerY,\r\n      size: 8,\r\n      font: font,\r\n      color: rgb(0.4, 0.4, 0.4)\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  private reverseArabicText(text: string): string {\r\n    try {\r\n      // For Arabic RTL text, we need to reverse the text order for proper display in PDF\r\n      // This handles mixed content (Arabic + English + numbers)\r\n      \r\n      // Split text into segments (Arabic, non-Arabic)\r\n      const segments = this.segmentText(text);\r\n      \r\n      // Process each segment\r\n      const processedSegments = segments.map(segment => {\r\n        if (segment.isArabic) {\r\n          // Reverse Arabic text for RTL display\r\n          return segment.text.split('').reverse().join('');\r\n        } else {\r\n          // Keep non-Arabic text as is\r\n          return segment.text;\r\n        }\r\n      });\r\n      \r\n      // Join segments back together\r\n      return processedSegments.join('');\r\n      \r\n    } catch (error) {\r\n      console.warn('Arabic text processing failed:', error);\r\n      // Fallback: return original text\r\n      return text;\r\n    }\r\n  }\r\n\r\n  private segmentText(text: string): Array<{text: string, isArabic: boolean}> {\r\n    const segments: Array<{text: string, isArabic: boolean}> = [];\r\n    let currentSegment = '';\r\n    let isCurrentArabic = false;\r\n    \r\n    for (let i = 0; i < text.length; i++) {\r\n      const char = text[i];\r\n      const isArabicChar = /[\\u0600-\\u06FF]/.test(char);\r\n      \r\n      if (i === 0) {\r\n        // First character - initialize\r\n        currentSegment = char;\r\n        isCurrentArabic = isArabicChar;\r\n      } else if (isArabicChar === isCurrentArabic) {\r\n        // Same type as current segment - add to current\r\n        currentSegment += char;\r\n      } else {\r\n        // Different type - save current segment and start new one\r\n        segments.push({text: currentSegment, isArabic: isCurrentArabic});\r\n        currentSegment = char;\r\n        isCurrentArabic = isArabicChar;\r\n      }\r\n    }\r\n    \r\n    // Add final segment\r\n    if (currentSegment) {\r\n      segments.push({text: currentSegment, isArabic: isCurrentArabic});\r\n    }\r\n    \r\n    return segments;\r\n  }\r\n\r\n  async exportToExcel(config: ExportConfig): Promise<void> {\r\n    // Check data size\r\n    if (!await this.checkDataSize(config.data.length)) {\r\n      return;\r\n    }\r\n\r\n    const loading = await this.getLoadingController().create({\r\n      message: 'جاري تصدير ملف Excel...',\r\n      spinner: 'crescent'\r\n    });\r\n    await loading.present();\r\n\r\n    try {\r\n      // Create workbook\r\n      const wb = XLSX.utils.book_new();\r\n      \r\n      // Prepare data\r\n      const worksheetData = this.prepareExcelData(config);\r\n      \r\n      // Create worksheet\r\n      const ws = XLSX.utils.aoa_to_sheet(worksheetData);\r\n      \r\n      // Apply modern styling\r\n      this.applyModernExcelStyling(ws, config);\r\n      \r\n      // Set column widths\r\n      const colWidths = config.columns.map(col => ({ wch: col.width || 15 }));\r\n      ws['!cols'] = colWidths;\r\n      \r\n      // Add worksheet to workbook\r\n      XLSX.utils.book_append_sheet(wb, ws, 'البيانات');\r\n      \r\n      // Write file\r\n      XLSX.writeFile(wb, `${config.fileName}.xlsx`);\r\n      \r\n      await this.showSuccessToast('تم تصدير ملف Excel بنجاح');\r\n      \r\n    } catch (error) {\r\n      console.error('Excel Export Error:', error);\r\n      await this.showErrorToast('فشل في تصدير ملف Excel');\r\n    } finally {\r\n      await loading.dismiss();\r\n    }\r\n  }\r\n\r\n  private async checkDataSize(rowCount: number): Promise<boolean> {\r\n    if (rowCount === 0) {\r\n      await this.showErrorToast('لا توجد بيانات للتصدير');\r\n      return false;\r\n    }\r\n\r\n    if (rowCount > this.MAX_ROWS_LIMIT) {\r\n      await this.showErrorToast(`البيانات كثيرة جداً (${rowCount} صف). الحد الأقصى هو ${this.MAX_ROWS_LIMIT} صف`);\r\n      return false;\r\n    }\r\n\r\n    if (rowCount > this.MAX_ROWS_WARNING) {\r\n      return await this.showConfirmationAlert(\r\n        'تحذير',\r\n        `البيانات كثيرة (${rowCount} صف). قد يستغرق التصدير وقتاً طويلاً. هل تريد المتابعة؟`\r\n      );\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  private processArabicText(text: string): string {\r\n    if (!text) return '';\r\n    \r\n    try {\r\n      // Check if text contains Arabic characters\r\n      const hasArabic = /[\\u0600-\\u06FF\\u0750-\\u077F]/.test(text);\r\n      \r\n      if (hasArabic) {\r\n        // Convert to professional English equivalents that maintain meaning\r\n        return this.convertArabicToProfessionalEnglish(text);\r\n      }\r\n      \r\n      return text;\r\n    } catch (error) {\r\n      console.warn('Arabic text processing failed:', error);\r\n      return text;\r\n    }\r\n  }\r\n\r\n  private convertArabicToProfessionalEnglish(text: string): string {\r\n    try {\r\n      // First check if text contains any Arabic characters\r\n      if (!text || !this.detectArabicText(text)) {\r\n        return text; // Return as-is if no Arabic\r\n      }\r\n      \r\n      // Professional Arabic-to-English conversion for business terms\r\n      const professionalTranslations: { [key: string]: string } = {\r\n        // Report titles and headers\r\n        'تقرير المخزون': 'Inventory Report',\r\n        'تقرير': 'Report',\r\n        'المخزون الإفتتاحي': 'Opening Stock',\r\n        'المخزون (in stock)': 'Stock Qty',\r\n        'المخزون': 'Inventory',\r\n        \r\n        // Column headers\r\n        'التسلسل': 'Serial No.',\r\n        'معرف الصنف': 'Item ID',\r\n        'اسم الصنف (English)': 'Item Name (English)',\r\n        'اسم الصنف': 'Item Name',\r\n        'الصنف': 'Item',\r\n        'اسم مستعار (Alias)': 'Alias Name',\r\n        'اسم مستعار': 'Alias',\r\n        'الموديل (model)': 'Model',\r\n        'الموديل': 'Model',\r\n        'الكود (part no)': 'Part Number',\r\n        'الكود': 'Code',\r\n        'رقم القطعة': 'Part Number',\r\n        'الماركة (brand)': 'Brand',\r\n        'الماركة': 'Brand',\r\n        'اقل كمية (MSQ)': 'Min. Stock Qty',\r\n        'اقل كمية': 'Min. Qty',\r\n        'الحد الأدنى': 'Minimum',\r\n        'الوحده (unit)': 'Unit',\r\n        'الوحده': 'Unit',\r\n        'الوحدة': 'Unit',\r\n        'سعر الشراء (purch price)': 'Purchase Price',\r\n        'سعر الشراء': 'Purchase Price',\r\n        'سعر الوحده (selling price)': 'Selling Price',\r\n        'سعر الوحده': 'Unit Price',\r\n        'سعر البيع': 'Selling Price',\r\n        'نسبة الفائدة (profit perc)': 'Profit %',\r\n        'نسبة الفائدة': 'Profit %',\r\n        'الكمية المتاحة': 'Available Qty',\r\n        'الكمية': 'Quantity',\r\n        'المجموع': 'Total',\r\n        'اخر عملية بيع': 'Last Sale Date',\r\n        'الإفتتاحي': 'Opening',\r\n        'الإجراءات': 'Actions',\r\n        \r\n        // Common terms\r\n        'المستخدم': 'User',\r\n        'تاريخ التصدير': 'Export Date',\r\n        'صفحة': 'Page',\r\n        'من': 'of',\r\n        'إلى': 'to',\r\n        'في': 'on',\r\n        'التاريخ': 'Date',\r\n        'الوقت': 'Time',\r\n        \r\n        // Status and descriptions\r\n        'متوفر': 'Available',\r\n        'غير متوفر': 'Out of Stock',\r\n        'نشط': 'Active',\r\n        'غير نشط': 'Inactive',\r\n        'جديد': 'New',\r\n        'مستعمل': 'Used',\r\n        \r\n        // Numbers and measurements\r\n        'قطعة': 'Piece',\r\n        'قطع': 'Pieces',\r\n        'كيلو': 'Kg',\r\n        'جرام': 'Gram',\r\n        'متر': 'Meter',\r\n        'لتر': 'Liter'\r\n      };\r\n      \r\n      // First try exact phrase matches\r\n      let result = text.trim();\r\n      \r\n      // Sort by length (longest first) to match longer phrases before shorter ones\r\n      const sortedKeys = Object.keys(professionalTranslations).sort((a, b) => b.length - a.length);\r\n      \r\n      for (const arabicTerm of sortedKeys) {\r\n        if (result.includes(arabicTerm)) {\r\n          result = result.replace(new RegExp(arabicTerm, 'g'), professionalTranslations[arabicTerm]);\r\n        }\r\n      }\r\n      \r\n      // If no exact matches found, try word-by-word translation\r\n      if (result === text) {\r\n        const words = text.split(/\\s+/);\r\n        const translatedWords = words.map(word => {\r\n          const cleanWord = word.trim();\r\n          return professionalTranslations[cleanWord] || this.transliterateArabicWord(cleanWord);\r\n        });\r\n        result = translatedWords.join(' ');\r\n      }\r\n      \r\n      // CRITICAL: Final safety check - if ANY Arabic characters remain, transliterate them\r\n      // This ensures NO Arabic characters reach font rendering\r\n      if (this.detectArabicText(result)) {\r\n        console.warn('Arabic characters still present after conversion, applying full transliteration');\r\n        result = this.safeArabicToEnglishTransliteration(result);\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      console.warn('Professional Arabic conversion failed:', error);\r\n      return this.transliterateArabicWord(text);\r\n    }\r\n  }\r\n\r\n  private transliterateArabicWord(word: string): string {\r\n    // Fallback transliteration for unmapped words\r\n    const arabicToEnglishMap: { [key: string]: string } = {\r\n      'ا': 'a', 'أ': 'a', 'إ': 'i', 'آ': 'aa',\r\n      'ب': 'b', 'ت': 't', 'ث': 'th',\r\n      'ج': 'j', 'ح': 'h', 'خ': 'kh',\r\n      'د': 'd', 'ذ': 'dh',\r\n      'ر': 'r', 'ز': 'z',\r\n      'س': 's', 'ش': 'sh',\r\n      'ص': 's', 'ض': 'd',\r\n      'ط': 't', 'ظ': 'dh',\r\n      'ع': 'a', 'غ': 'gh',\r\n      'ف': 'f', 'ق': 'q',\r\n      'ك': 'k', 'ل': 'l',\r\n      'م': 'm', 'ن': 'n',\r\n      'ه': 'h', 'ة': 'h',\r\n      'و': 'w', 'ي': 'y',\r\n      'ى': 'a', 'ء': ''\r\n    };\r\n    \r\n    let result = '';\r\n    for (const char of word) {\r\n      result += arabicToEnglishMap[char] || char;\r\n    }\r\n    \r\n    // Capitalize first letter for better appearance\r\n    return result.charAt(0).toUpperCase() + result.slice(1).toLowerCase();\r\n  }\r\n\r\n  private safeArabicToEnglishTransliteration(text: string): string {\r\n    // COMPREHENSIVE Arabic character replacement - handles ALL Unicode Arabic ranges\r\n    const completeArabicToEnglishMap: { [key: string]: string } = {\r\n      // Basic Arabic Letters (U+0621-U+063A)\r\n      'ء': '', 'آ': 'aa', 'أ': 'a', 'ؤ': 'u', 'إ': 'i', 'ئ': 'i', 'ا': 'a', 'ب': 'b',\r\n      'ة': 'h', 'ت': 't', 'ث': 'th', 'ج': 'j', 'ح': 'h', 'خ': 'kh', 'د': 'd', 'ذ': 'dh',\r\n      'ر': 'r', 'ز': 'z', 'س': 's', 'ش': 'sh', 'ص': 's', 'ض': 'd', 'ط': 't', 'ظ': 'dh',\r\n      'ع': 'a', 'غ': 'gh', 'ـ': '', 'ف': 'f', 'ق': 'q', 'ك': 'k', 'ل': 'l', 'م': 'm',\r\n      'ن': 'n', 'ه': 'h', 'و': 'w', 'ى': 'a', 'ي': 'y',\r\n      \r\n      // Extended Arabic (U+0640-U+065F)\r\n      'ً': '', 'ٌ': '', 'ٍ': '', 'َ': '', 'ُ': '', 'ِ': '', 'ّ': '', 'ْ': '', 'ٓ': '',\r\n      'ٔ': '', 'ٕ': '', 'ٖ': '', 'ٗ': '', '٘': '', 'ٙ': '', 'ٚ': '', 'ٛ': '', 'ٜ': '',\r\n      'ٝ': '', 'ٞ': '', 'ٟ': '',\r\n      \r\n      // Arabic-Indic Digits (U+0660-U+0669)\r\n      '٠': '0', '١': '1', '٢': '2', '٣': '3', '٤': '4', '٥': '5', '٦': '6', '٧': '7', '٨': '8', '٩': '9',\r\n      \r\n      // Additional Arabic characters\r\n      'ک': 'k', 'گ': 'g', 'پ': 'p', 'چ': 'ch', 'ژ': 'zh', 'ڤ': 'v', 'ڥ': 'f', 'ڦ': 'f',\r\n      'ڧ': 'q', 'ڨ': 'q', 'ڪ': 'k', 'ګ': 'g', 'ڬ': 'g', 'ڭ': 'ng', 'ڮ': 'ng',\r\n      \r\n      // Arabic Presentation Forms-A (U+FB50-U+FDFF) - Common ligatures\r\n      'ﻻ': 'la', 'ﻷ': 'laa', 'ﻹ': 'laa', 'ﻵ': 'laa',\r\n      \r\n      // Arabic Presentation Forms-B (U+FE70-U+FEFF) - Positional forms\r\n      'ﹰ': '', 'ﹱ': '', 'ﹲ': '', 'ﹳ': '', 'ﹴ': '', 'ﹶ': '', 'ﹷ': '', 'ﹸ': '', 'ﹹ': '', 'ﹺ': '', 'ﹻ': '', 'ﹼ': '', 'ﹽ': '', 'ﹾ': '', 'ﹿ': '',\r\n      'ﺀ': '', 'ﺁ': 'aa', 'ﺂ': 'aa', 'ﺃ': 'a', 'ﺄ': 'a', 'ﺅ': 'u', 'ﺆ': 'u', 'ﺇ': 'i', 'ﺈ': 'i', 'ﺉ': 'i', 'ﺊ': 'i', 'ﺋ': 'i', 'ﺌ': 'i', 'ﺍ': 'a', 'ﺎ': 'a',\r\n      'ﺏ': 'b', 'ﺐ': 'b', 'ﺑ': 'b', 'ﺒ': 'b', 'ﺓ': 'h', 'ﺔ': 'h', 'ﺕ': 't', 'ﺖ': 't', 'ﺗ': 't', 'ﺘ': 't', 'ﺙ': 'th', 'ﺚ': 'th', 'ﺛ': 'th', 'ﺜ': 'th',\r\n      'ﺝ': 'j', 'ﺞ': 'j', 'ﺟ': 'j', 'ﺠ': 'j', 'ﺡ': 'h', 'ﺢ': 'h', 'ﺣ': 'h', 'ﺤ': 'h', 'ﺥ': 'kh', 'ﺦ': 'kh', 'ﺧ': 'kh', 'ﺨ': 'kh',\r\n      'ﺩ': 'd', 'ﺪ': 'd', 'ﺫ': 'dh', 'ﺬ': 'dh', 'ﺭ': 'r', 'ﺮ': 'r', 'ﺯ': 'z', 'ﺰ': 'z',\r\n      'ﺱ': 's', 'ﺲ': 's', 'ﺳ': 's', 'ﺴ': 's', 'ﺵ': 'sh', 'ﺶ': 'sh', 'ﺷ': 'sh', 'ﺸ': 'sh',\r\n      'ﺹ': 's', 'ﺺ': 's', 'ﺻ': 's', 'ﺼ': 's', 'ﺽ': 'd', 'ﺾ': 'd', 'ﺿ': 'd', 'ﻀ': 'd',\r\n      'ﻁ': 't', 'ﻂ': 't', 'ﻃ': 't', 'ﻄ': 't', 'ﻅ': 'dh', 'ﻆ': 'dh', 'ﻇ': 'dh', 'ﻈ': 'dh',\r\n      'ﻉ': 'a', 'ﻊ': 'a', 'ﻋ': 'a', 'ﻌ': 'a', 'ﻍ': 'gh', 'ﻎ': 'gh', 'ﻏ': 'gh', 'ﻐ': 'gh',\r\n      'ﻑ': 'f', 'ﻒ': 'f', 'ﻓ': 'f', 'ﻔ': 'f', 'ﻕ': 'q', 'ﻖ': 'q', 'ﻗ': 'q', 'ﻘ': 'q',\r\n      'ﻙ': 'k', 'ﻚ': 'k', 'ﻛ': 'k', 'ﻜ': 'k', 'ﻝ': 'l', 'ﻞ': 'l', 'ﻟ': 'l', 'ﻠ': 'l',\r\n      'ﻡ': 'm', 'ﻢ': 'm', 'ﻣ': 'm', 'ﻤ': 'm', 'ﻥ': 'n', 'ﻦ': 'n', 'ﻧ': 'n', 'ﻨ': 'n',\r\n      'ﻩ': 'h', 'ﻪ': 'h', 'ﻫ': 'h', 'ﻬ': 'h', 'ﻭ': 'w', 'ﻮ': 'w', 'ﻯ': 'a', 'ﻰ': 'a', 'ﻱ': 'y', 'ﻲ': 'y', 'ﻳ': 'y', 'ﻴ': 'y'\r\n    };\r\n    \r\n    let result = '';\r\n    for (const char of text) {\r\n      // Check if character is in our mapping\r\n      if (completeArabicToEnglishMap[char]) {\r\n        result += completeArabicToEnglishMap[char];\r\n      } else if (/[\\u0600-\\u06FF\\u0750-\\u077F\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/.test(char)) {\r\n        // If it's still an Arabic character not in our map, replace with 'x'\r\n        result += 'x';\r\n      } else {\r\n        // Keep non-Arabic characters as-is\r\n        result += char;\r\n      }\r\n    }\r\n    \r\n    // Clean up the result\r\n    result = result.replace(/\\s+/g, ' ').trim();\r\n    \r\n    // Capitalize first letter if result is not empty\r\n    if (result.length > 0) {\r\n      result = result.charAt(0).toUpperCase() + result.slice(1).toLowerCase();\r\n    }\r\n    \r\n    return result || 'Text'; // Fallback to 'Text' if result is empty\r\n  }\r\n\r\n  private async loadArabicFont(): Promise<ArrayBuffer> {\r\n    try {\r\n      // Strategy 1: Try to load from multiple reliable Arabic font sources\r\n      const fontUrls = [\r\n        // Google Fonts - more reliable endpoints\r\n        'https://fonts.gstatic.com/s/cairo/v28/SLXGc1nY6HkvalIkTp2mxdt0UX8gfO8_19co.woff2',\r\n        'https://fonts.gstatic.com/s/nototc/v35/m8JVjfNVeKWVnh3QMuKkFcZlbkGG1dKFzQ.woff2',\r\n        'https://fonts.gstatic.com/s/scheherazadnew/v16/4UaZrEhTvBiF3i89P6gvLJ2lfjz_-ruOvKsv.woff2',\r\n        // Fallback to a more basic Arabic font\r\n        'https://cdn.jsdelivr.net/gh/googlefonts/noto-fonts@main/hinted/ttf/NotoSansArabic/NotoSansArabic-Regular.ttf'\r\n      ];\r\n      \r\n      // Try each font URL with better error handling\r\n      for (const fontUrl of fontUrls) {\r\n        try {\r\n          console.log(`Attempting to load Arabic font from: ${fontUrl}`);\r\n          \r\n          const response = await fetch(fontUrl, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            cache: 'default',\r\n            headers: {\r\n              'Accept': 'font/woff2,font/woff,font/ttf,*/*'\r\n            }\r\n          });\r\n          \r\n          if (response.ok && response.status === 200) {\r\n            const fontBytes = await response.arrayBuffer();\r\n            if (fontBytes.byteLength > 1000) { // Ensure we got actual font data\r\n              console.log(`✅ Arabic font loaded successfully from CDN: ${fontBytes.byteLength} bytes`);\r\n              return fontBytes;\r\n            }\r\n          }\r\n        } catch (urlError) {\r\n          console.warn(`❌ Failed to load font from ${fontUrl}:`, urlError);\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      // Strategy 2: Try loading from local assets if available\r\n      try {\r\n        console.log('Attempting to load Arabic font from local assets...');\r\n        const localResponse = await fetch('./assets/fonts/NotoSansArabic-Regular.ttf');\r\n        if (localResponse.ok) {\r\n          const fontBytes = await localResponse.arrayBuffer();\r\n          console.log('✅ Arabic font loaded from local assets');\r\n          return fontBytes;\r\n        }\r\n      } catch (localError) {\r\n        console.warn('❌ No local Arabic font found');\r\n      }\r\n      \r\n      // Strategy 3: Create a basic Arabic font using web fonts API\r\n      try {\r\n        console.log('Attempting to create Arabic font using CSS Font Loading API...');\r\n        const fontFace = new FontFace('ArabicFont', 'url(https://fonts.gstatic.com/s/cairo/v28/SLXGc1nY6HkvalIkTp2mxdt0UX8gfO8_19co.woff2)');\r\n        await fontFace.load();\r\n        console.log('✅ Arabic font created using Font Loading API');\r\n        \r\n        // Convert FontFace to ArrayBuffer (this is a workaround)\r\n        const canvas = document.createElement('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        if (ctx) {\r\n          ctx.font = '16px ArabicFont';\r\n          ctx.fillText('تجربة', 10, 30); // Test Arabic text\r\n        }\r\n        \r\n        // For now, we'll fall back to the embed process\r\n        throw new Error('FontFace to ArrayBuffer conversion needed');\r\n      } catch (fontFaceError) {\r\n        console.warn('❌ Font Loading API failed');\r\n      }\r\n      \r\n      // If all else fails, throw error to trigger fallback\r\n      throw new Error('All Arabic font loading strategies failed');\r\n      \r\n    } catch (error) {\r\n      console.warn('All Arabic font loading attempts failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private safeGetTextWidth(font: any, text: string, size: number): number {\r\n    try {\r\n      return font.widthOfTextAtSize(text, size);\r\n    } catch (error) {\r\n      console.warn('Error calculating text width, using fallback:', error);\r\n      // Fallback: approximate width based on character count\r\n      return text.length * size * 0.6;\r\n    }\r\n  }\r\n\r\n  private safeDrawText(page: any, text: string, options: any): boolean {\r\n    try {\r\n      // Process Arabic text for better PDF rendering\r\n      let processedText = text;\r\n      const hasArabic = /[\\u0600-\\u06FF]/.test(text);\r\n      \r\n      if (hasArabic) {\r\n        console.log('Processing Arabic text for PDF:', text.substring(0, 20) + '...');\r\n        \r\n        // Apply Arabic text fixes for PDF compatibility\r\n        processedText = this.fixArabicTextForPDF(text);\r\n        \r\n        // Apply proper RTL text processing\r\n        processedText = this.processArabicTextForPDF(processedText);\r\n        \r\n        console.log('Arabic text processed successfully');\r\n      }\r\n      \r\n      page.drawText(processedText, options);\r\n      return true;\r\n    } catch (error) {\r\n      console.warn('Failed to draw processed Arabic text:', error);\r\n      console.warn('Original text:', text);\r\n      \r\n      // Enhanced fallback strategy - try different approaches\r\n      const fallbackStrategies = [\r\n        () => {\r\n          // Strategy 1: Try with cleaned Arabic text (remove problematic chars)\r\n          const cleanedText = this.cleanArabicTextForPDF(text);\r\n          page.drawText(cleanedText, options);\r\n          console.log('✅ Successfully drawn with cleaned Arabic text');\r\n        },\r\n        () => {\r\n          // Strategy 2: Try with simplified Arabic (basic characters only)\r\n          const simplifiedText = this.simplifyArabicText(text);\r\n          page.drawText(simplifiedText, options);\r\n          console.log('✅ Successfully drawn with simplified Arabic text');\r\n        },\r\n        () => {\r\n          // Strategy 3: Try with transliterated Arabic but keeping structure\r\n          const transliteratedText = this.smartArabicTransliteration(text);\r\n          page.drawText(transliteratedText, options);\r\n          console.log('⚠️ Drawn with smart transliteration');\r\n        }\r\n      ];\r\n      \r\n      // Try each fallback strategy\r\n      for (let i = 0; i < fallbackStrategies.length; i++) {\r\n        try {\r\n          fallbackStrategies[i]();\r\n          return true;\r\n        } catch (strategyError) {\r\n          console.warn(`Fallback strategy ${i + 1} failed:`, strategyError);\r\n          if (i === fallbackStrategies.length - 1) {\r\n            console.error('All fallback strategies failed');\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  }\r\n\r\n  private fixArabicTextForPDF(text: string): string {\r\n    // Apply specific fixes for common Arabic text issues in PDF\r\n    let fixedText = text;\r\n    \r\n    // Fix common Arabic ligatures and complex characters that might not render well\r\n    const arabicFixes: { [key: string]: string } = {\r\n      // Replace complex ligatures with simpler forms\r\n      '\\uFEDF': 'لا', // Arabic ligature Lam-Alef\r\n      '\\uFEE0': 'لا', // Arabic ligature Lam-Alef with Hamza above\r\n      '\\uFEE1': 'لإ', // Arabic ligature Lam-Alef with Hamza below\r\n      '\\uFEE2': 'لإ', // Arabic ligature Lam-Alef with Hamza below\r\n      '\\uFEE3': 'لآ', // Arabic ligature Lam-Alef with Madda above\r\n      '\\uFEE4': 'لآ', // Arabic ligature Lam-Alef with Madda above\r\n      \r\n      // Fix other common problematic characters\r\n      '\\u064B': '', // Arabic Fathatan (remove diacritics that cause issues)\r\n      '\\u064C': '', // Arabic Dammatan\r\n      '\\u064D': '', // Arabic Kasratan\r\n      '\\u064E': '', // Arabic Fatha\r\n      '\\u064F': '', // Arabic Damma\r\n      '\\u0650': '', // Arabic Kasra\r\n      '\\u0651': '', // Arabic Shadda\r\n      '\\u0652': '', // Arabic Sukun\r\n    };\r\n    \r\n    // Apply fixes\r\n    Object.entries(arabicFixes).forEach(([problematic, replacement]) => {\r\n      fixedText = fixedText.replace(new RegExp(problematic, 'g'), replacement);\r\n    });\r\n    \r\n    return fixedText;\r\n  }\r\n\r\n  private cleanArabicTextForPDF(text: string): string {\r\n    if (!text) return '';\r\n    \r\n    // Remove only the most problematic diacritics but keep main Arabic characters\r\n    const cleanedText = text\r\n      .replace(/[\\u064B-\\u0652]/g, '') // Remove most diacritics\r\n      .replace(/[\\u0653-\\u0655]/g, '') // Remove additional marks\r\n      .replace(/[\\u0670\\u0640]/g, '') // Remove elongation marks\r\n      .replace(/\\u200C/g, '') // Remove zero-width non-joiner\r\n      .replace(/\\u200D/g, '') // Remove zero-width joiner\r\n      .trim();\r\n    \r\n    return cleanedText;\r\n  }\r\n\r\n  private simplifyArabicText(text: string): string {\r\n    if (!text) return '';\r\n    \r\n    // Keep only basic Arabic letters and numbers\r\n    const basicArabicPattern = /[\\u0621-\\u063A\\u0641-\\u064A\\u0660-\\u0669\\u0020-\\u007E]/g;\r\n    const matches = text.match(basicArabicPattern);\r\n    \r\n    return matches ? matches.join('') : text;\r\n  }\r\n\r\n  private smartArabicTransliteration(text: string): string {\r\n    if (!text) return '';\r\n    \r\n    // Only transliterate if absolutely necessary, and do it intelligently\r\n    const hasArabic = /[\\u0600-\\u06FF]/.test(text);\r\n    \r\n    if (!hasArabic) return text;\r\n    \r\n    // Smart transliteration that preserves meaning for business terms\r\n    const smartMap: { [key: string]: string } = {\r\n      // Keep common business terms recognizable\r\n      'تقرير المخزون': 'Stock Report',\r\n      'المخزون الإفتتاحي': 'Opening Inventory',\r\n      'اسم الصنف': 'Item Name',\r\n      'الكمية': 'Quantity',\r\n      'السعر': 'Price',\r\n      'المجموع': 'Total',\r\n      'التاريخ': 'Date',\r\n      \r\n      // Individual characters as last resort\r\n      'ا': 'a', 'ب': 'b', 'ت': 't', 'ث': 'th', 'ج': 'j', 'ح': 'h',\r\n      'خ': 'kh', 'د': 'd', 'ذ': 'dh', 'ر': 'r', 'ز': 'z', 'س': 's',\r\n      'ش': 'sh', 'ص': 's', 'ض': 'd', 'ط': 't', 'ظ': 'dh', 'ع': 'a',\r\n      'غ': 'gh', 'ف': 'f', 'ق': 'q', 'ك': 'k', 'ل': 'l', 'م': 'm',\r\n      'ن': 'n', 'ه': 'h', 'و': 'w', 'ي': 'y'\r\n    };\r\n    \r\n    let result = text;\r\n    \r\n    // First try phrase-based replacement\r\n    Object.keys(smartMap).forEach(arabic => {\r\n      if (result.includes(arabic)) {\r\n        result = result.replace(new RegExp(arabic, 'g'), smartMap[arabic]);\r\n      }\r\n    });\r\n    \r\n    return result;\r\n  }\r\n\r\n  private processArabicTextForPDF(text: string): string {\r\n    if (!text) return '';\r\n    \r\n    // Enhanced Arabic text processing for PDF compatibility\r\n    try {\r\n      // Clean the text first\r\n      let processedText = this.cleanArabicTextForPDF(text);\r\n      \r\n      // Apply RTL text fixes if needed\r\n      const hasArabic = /[\\u0600-\\u06FF]/.test(processedText);\r\n      if (hasArabic) {\r\n        // For PDF, we typically don't need to reverse text as the font handles directionality\r\n        // Just ensure proper character encoding\r\n        processedText = processedText.normalize('NFKC'); // Normalize Unicode\r\n      }\r\n      \r\n      return processedText;\r\n    } catch (error) {\r\n      console.warn('Arabic text processing failed, returning original:', error);\r\n      return text;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  private prepareExcelData(config: ExportConfig): any[][] {\r\n    const data: any[][] = [];\r\n    \r\n    // Add title row - will be styled later\r\n    const titleRow = new Array(config.columns.length).fill('');\r\n    titleRow[0] = config.title;\r\n    data.push(titleRow);\r\n    \r\n    // Add subtitle row if exists - will be styled later\r\n    if (config.subtitle) {\r\n      const subtitleRow = new Array(config.columns.length).fill('');\r\n      subtitleRow[0] = config.subtitle;\r\n      data.push(subtitleRow);\r\n    }\r\n    \r\n    // Add date row\r\n    const dateRow = new Array(config.columns.length).fill('');\r\n    dateRow[0] = config.currentDate || this.formatDate(new Date(), 'yyyy-MM-dd');\r\n    data.push(dateRow);\r\n    \r\n    data.push(new Array(config.columns.length).fill('')); // Empty row\r\n    \r\n    // Add column headers\r\n    data.push(config.columns.map(col => col.title));\r\n    \r\n    // Add data rows with serial number support\r\n    config.data.forEach((row, index) => {\r\n      const rowData = config.columns.map(col => this.getCellValue(row, col, index + 1));\r\n      data.push(rowData);\r\n    });\r\n    \r\n    // Add footer\r\n    data.push(new Array(config.columns.length).fill('')); // Empty row\r\n    const footerRow1 = new Array(config.columns.length).fill('');\r\n    footerRow1[0] = `المستخدم: ${config.userName}`;\r\n    data.push(footerRow1);\r\n    \r\n    const footerRow2 = new Array(config.columns.length).fill('');\r\n    footerRow2[0] = `تاريخ التصدير: ${this.formatDate(new Date(), 'yyyy-MM-dd HH:mm')}`;\r\n    data.push(footerRow2);\r\n    \r\n    return data;\r\n  }\r\n\r\n  private applyModernExcelStyling(ws: any, config: ExportConfig): void {\r\n    const numCols = config.columns.length;\r\n    const lastCol = this.numberToExcelColumn(numCols - 1);\r\n    \r\n    // Initialize merges array if it doesn't exist\r\n    if (!ws['!merges']) {\r\n      ws['!merges'] = [];\r\n    }\r\n    \r\n    let currentRow = 0;\r\n    \r\n    // Style and merge title row (row 1)\r\n    const titleCell = `A${currentRow + 1}`;\r\n    const titleMergeRange = `A${currentRow + 1}:${lastCol}${currentRow + 1}`;\r\n    \r\n    if (ws[titleCell]) {\r\n      ws[titleCell].s = {\r\n        font: { bold: true, sz: 18, color: { rgb: \"1F4E79\" } },\r\n        alignment: { horizontal: \"center\", vertical: \"center\" },\r\n        fill: { fgColor: { rgb: \"E7F3FF\" } },\r\n        border: {\r\n          top: { style: \"thin\", color: { rgb: \"1F4E79\" } },\r\n          bottom: { style: \"thin\", color: { rgb: \"1F4E79\" } },\r\n          left: { style: \"thin\", color: { rgb: \"1F4E79\" } },\r\n          right: { style: \"thin\", color: { rgb: \"1F4E79\" } }\r\n        }\r\n      };\r\n    }\r\n    \r\n    // Merge title cells\r\n    ws['!merges'].push(this.decodeRange(titleMergeRange));\r\n    currentRow++;\r\n    \r\n    // Style and merge subtitle row if exists\r\n    if (config.subtitle) {\r\n      const subtitleCell = `A${currentRow + 1}`;\r\n      const subtitleMergeRange = `A${currentRow + 1}:${lastCol}${currentRow + 1}`;\r\n      \r\n      if (ws[subtitleCell]) {\r\n        ws[subtitleCell].s = {\r\n          font: { bold: true, sz: 14, color: { rgb: \"2F75B5\" } },\r\n          alignment: { horizontal: \"center\", vertical: \"center\" },\r\n          fill: { fgColor: { rgb: \"F2F8FF\" } }\r\n        };\r\n      }\r\n      \r\n      ws['!merges'].push(this.decodeRange(subtitleMergeRange));\r\n      currentRow++;\r\n    }\r\n    \r\n    // Style date row\r\n    const dateCell = `A${currentRow + 1}`;\r\n    const dateMergeRange = `A${currentRow + 1}:${lastCol}${currentRow + 1}`;\r\n    \r\n    if (ws[dateCell]) {\r\n      ws[dateCell].s = {\r\n        font: { sz: 11, color: { rgb: \"666666\" } },\r\n        alignment: { horizontal: \"center\", vertical: \"center\" }\r\n      };\r\n    }\r\n    \r\n    ws['!merges'].push(this.decodeRange(dateMergeRange));\r\n    currentRow += 2; // Skip date row and empty row\r\n    \r\n    // Style column headers\r\n    const headerRowIndex = currentRow + 1;\r\n    for (let colIndex = 0; colIndex < numCols; colIndex++) {\r\n      const colLetter = this.numberToExcelColumn(colIndex);\r\n      const cellRef = `${colLetter}${headerRowIndex}`;\r\n      \r\n      if (ws[cellRef]) {\r\n        ws[cellRef].s = {\r\n          font: { bold: true, sz: 12, color: { rgb: \"FFFFFF\" } },\r\n          alignment: { horizontal: \"center\", vertical: \"center\" },\r\n          fill: { fgColor: { rgb: \"4472C4\" } },\r\n          border: {\r\n            top: { style: \"thin\", color: { rgb: \"FFFFFF\" } },\r\n            bottom: { style: \"thin\", color: { rgb: \"FFFFFF\" } },\r\n            left: { style: \"thin\", color: { rgb: \"FFFFFF\" } },\r\n            right: { style: \"thin\", color: { rgb: \"FFFFFF\" } }\r\n          }\r\n        };\r\n      }\r\n    }\r\n    \r\n    // Style data rows with alternating colors\r\n    const dataStartRow = headerRowIndex + 1;\r\n    const dataEndRow = dataStartRow + config.data.length - 1;\r\n    \r\n    for (let rowIndex = dataStartRow; rowIndex <= dataEndRow; rowIndex++) {\r\n      const isEvenRow = (rowIndex - dataStartRow) % 2 === 0;\r\n      const fillColor = isEvenRow ? \"FFFFFF\" : \"F8F9FA\";\r\n      \r\n      for (let colIndex = 0; colIndex < numCols; colIndex++) {\r\n        const colLetter = this.numberToExcelColumn(colIndex);\r\n        const cellRef = `${colLetter}${rowIndex}`;\r\n        \r\n        if (ws[cellRef]) {\r\n          ws[cellRef].s = {\r\n            font: { sz: 10 },\r\n            alignment: { horizontal: \"center\", vertical: \"center\" },\r\n            fill: { fgColor: { rgb: fillColor } },\r\n            border: {\r\n              top: { style: \"thin\", color: { rgb: \"E1E5E9\" } },\r\n              bottom: { style: \"thin\", color: { rgb: \"E1E5E9\" } },\r\n              left: { style: \"thin\", color: { rgb: \"E1E5E9\" } },\r\n              right: { style: \"thin\", color: { rgb: \"E1E5E9\" } }\r\n            }\r\n          };\r\n          \r\n          // Special formatting for currency columns\r\n          const column = config.columns[colIndex];\r\n          if (column && column.type === 'currency') {\r\n            ws[cellRef].s.alignment.horizontal = \"right\";\r\n          }\r\n          \r\n          // Special formatting for serial number column\r\n          if (column && column.key === 'serialNumber') {\r\n            ws[cellRef].s.font.bold = true;\r\n            ws[cellRef].s.fill = { fgColor: { rgb: \"E7F3FF\" } };\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  private numberToExcelColumn(num: number): string {\r\n    let column = '';\r\n    while (num >= 0) {\r\n      column = String.fromCharCode(65 + (num % 26)) + column;\r\n      num = Math.floor(num / 26) - 1;\r\n    }\r\n    return column;\r\n  }\r\n  \r\n  private decodeRange(range: string): any {\r\n    const parts = range.split(':');\r\n    const start = this.cellRefToCoords(parts[0]);\r\n    const end = this.cellRefToCoords(parts[1]);\r\n    \r\n    return {\r\n      s: { c: start.c, r: start.r },\r\n      e: { c: end.c, r: end.r }\r\n    };\r\n  }\r\n  \r\n  private cellRefToCoords(cellRef: string): { c: number, r: number } {\r\n    const match = cellRef.match(/([A-Z]+)(\\d+)/);\r\n    if (!match) return { c: 0, r: 0 };\r\n    \r\n    const col = match[1];\r\n    const row = parseInt(match[2]) - 1;\r\n    \r\n    let colNum = 0;\r\n    for (let i = 0; i < col.length; i++) {\r\n      colNum = colNum * 26 + (col.charCodeAt(i) - 64);\r\n    }\r\n    colNum -= 1;\r\n    \r\n    return { c: colNum, r: row };\r\n  }\r\n\r\n  private getCellValue(row: any, column: ExportColumn, serialNumber?: number): string {\r\n    let value: any;\r\n    \r\n    // Handle calculated fields\r\n    if (column.key === 'serialNumber') {\r\n      value = serialNumber || 1;\r\n    } else if (column.key === 'finalAmount') {\r\n      const total = parseFloat(row.tot_pr) || 0;\r\n      const discount = parseFloat(row.discount) || 0;\r\n      value = total - discount;\r\n    } else if (column.key === 'stockValue') {\r\n      const quantity = parseFloat(row.quantity) || 0;\r\n      const payPrice = parseFloat(row.pay_price) || 0;\r\n      value = quantity * payPrice;\r\n    } else if (column.key === 'profitPercentage') {\r\n      // Calculate profit percentage like in the component\r\n      const payPrice = parseFloat(row.pay_price) || 0;\r\n      const perchPrice = parseFloat(row.perch_price) || 0;\r\n      \r\n      if (!payPrice || !perchPrice || perchPrice === 0) {\r\n        value = 0;\r\n      } else {\r\n        value = ((payPrice - perchPrice) / perchPrice) * 100;\r\n      }\r\n    } else {\r\n      value = this.getNestedValue(row, column.key);\r\n    }\r\n    \r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n    \r\n    switch (column.type) {\r\n      case 'currency':\r\n        return this.formatCurrency(value);\r\n      case 'date':\r\n        return this.formatDate(value, 'yyyy-MM-dd');\r\n      case 'number':\r\n        if (column.key === 'profitPercentage') {\r\n          // Format profit percentage with 2 decimal places and % sign\r\n          const numValue = parseFloat(value);\r\n          if (isNaN(numValue)) return '0.00%';\r\n          return `${numValue.toFixed(2)}%`;\r\n        }\r\n        return this.formatNumber(value);\r\n      default:\r\n        return value.toString();\r\n    }\r\n  }\r\n\r\n  private getNestedValue(obj: any, path: string): any {\r\n    return path.split('.').reduce((current, prop) => current && current[prop], obj);\r\n  }\r\n\r\n  private formatCurrency(value: any): string {\r\n    const numValue = parseFloat(value);\r\n    if (isNaN(numValue)) return '0.00';\r\n    \r\n    return new Intl.NumberFormat('en-US', {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    }).format(numValue);\r\n  }\r\n\r\n  private formatNumber(value: any): string {\r\n    const numValue = parseFloat(value);\r\n    if (isNaN(numValue)) return '0';\r\n    \r\n    return new Intl.NumberFormat('en-US').format(numValue);\r\n  }\r\n\r\n  generateDynamicTitle(pageType: string): string {\r\n    const titles: { [key: string]: string } = {\r\n      'sales-record': 'تقرير المبيعات',\r\n      'purchase-record': 'تقرير المشتريات',\r\n      'item-stock': 'تقرير المخزون',\r\n      'cash2': 'تقرير الخزينة',\r\n      'statement2': 'كشف الحساب',\r\n      'spend-record2': 'تقرير المصروفات',\r\n      'balance-sheet2': 'الميزانية العمومية',\r\n      'sub-account2': 'تقرير الحسابات الفرعية'\r\n    };\r\n    \r\n    return titles[pageType] || 'تقرير';\r\n  }\r\n\r\n  generateDynamicSubtitle(pageType: string, filters: any): string {\r\n    let subtitle = '';\r\n    \r\n    if (filters.selectedAccount && filters.selectedAccount.sub_name) {\r\n      if (pageType === 'sales-record') {\r\n        subtitle += `العميل: ${filters.selectedAccount.sub_name}`;\r\n      } else if (pageType === 'purchase-record') {\r\n        subtitle += `المورد: ${filters.selectedAccount.sub_name}`;\r\n      } else {\r\n        subtitle += `الحساب: ${filters.selectedAccount.sub_name}`;\r\n      }\r\n    }\r\n    \r\n    if (filters.dateFilter) {\r\n      if (subtitle) subtitle += ' - ';\r\n      \r\n      if (filters.dateFilter.type === 'single' && filters.dateFilter.date) {\r\n        subtitle += `في تاريخ ${this.formatDateArabic(filters.dateFilter.date)}`;\r\n      } else if (filters.dateFilter.type === 'range' && filters.dateFilter.startDate && filters.dateFilter.endDate) {\r\n        subtitle += `في الفترة من ${this.formatDateArabic(filters.dateFilter.startDate)} إلى ${this.formatDateArabic(filters.dateFilter.endDate)}`;\r\n      }\r\n    }\r\n    \r\n    if (filters.searchTerm) {\r\n      if (subtitle) subtitle += ' - ';\r\n      subtitle += `البحث: ${filters.searchTerm}`;\r\n    }\r\n    \r\n    return subtitle;\r\n  }\r\n\r\n  private formatDateArabic(date: string): string {\r\n    if (!date) return '';\r\n    \r\n    const arabicMonths = [\r\n      'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',\r\n      'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'\r\n    ];\r\n    \r\n    const dateObj = new Date(date);\r\n    const day = dateObj.getDate();\r\n    const month = arabicMonths[dateObj.getMonth()];\r\n    \r\n    return `${day} ${month}`;\r\n  }\r\n\r\n  private async showSuccessToast(message: string): Promise<void> {\r\n    const toast = await this.getToastController().create({\r\n      message,\r\n      duration: 3000,\r\n      color: 'success',\r\n      position: 'top',\r\n      mode: 'ios'\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  private async showErrorToast(message: string): Promise<void> {\r\n    const toast = await this.getToastController().create({\r\n      message,\r\n      duration: 3000,\r\n      color: 'danger',\r\n      position: 'top',\r\n      mode: 'ios'\r\n    });\r\n    await toast.present();\r\n  }\r\n\r\n  private async showConfirmationAlert(header: string, message: string): Promise<boolean> {\r\n    return new Promise(async (resolve) => {\r\n      const alert = await this.getAlertController().create({\r\n        header,\r\n        message,\r\n        buttons: [\r\n          {\r\n            text: 'إلغاء',\r\n            role: 'cancel',\r\n            handler: () => resolve(false)\r\n          },\r\n          {\r\n            text: 'متابعة',\r\n            handler: () => resolve(true)\r\n          }\r\n        ]\r\n      });\r\n      await alert.present();\r\n    });\r\n  }\r\n}"],"names":[],"sourceRoot":"webpack:///"}